"use strict";(self.webpackChunkhackmajoris_blog=self.webpackChunkhackmajoris_blog||[]).push([[226],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),u=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(o.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,o=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=u(n),d=a,h=c["".concat(o,".").concat(d)]||c[d]||m[d]||s;return n?r.createElement(h,i(i({ref:t},p),{},{components:n})):r.createElement(h,i({ref:t},p))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,i=new Array(s);i[0]=d;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l[c]="string"==typeof e?e:a,i[1]=l;for(var u=2;u<s;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1032:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>m,frontMatter:()=>s,metadata:()=>l,toc:()=>u});var r=n(7462),a=(n(7294),n(3905));const s={slug:"A Java DTO mapping example\ufe0f",title:"\ud83d\ude80 A Java DTO mapping example\ufe0f",layout:"post",author:"Alexandru Ilies",tags:["java","howto"]},i=void 0,l={permalink:"/A Java DTO mapping example\ufe0f",source:"@site/blog/2018-05-22-a-java-dto-mapping-example.md",title:"\ud83d\ude80 A Java DTO mapping example\ufe0f",description:"Originally written here",date:"2018-05-22T00:00:00.000Z",formattedDate:"May 22, 2018",tags:[{label:"java",permalink:"/tags/java"},{label:"howto",permalink:"/tags/howto"}],readingTime:3.995,hasTruncateMarker:!0,authors:[{name:"Alexandru Ilies"}],frontMatter:{slug:"A Java DTO mapping example\ufe0f",title:"\ud83d\ude80 A Java DTO mapping example\ufe0f",layout:"post",author:"Alexandru Ilies",tags:["java","howto"]},prevItem:{title:"\ud83d\ude80 Enjoy the process",permalink:"/2022/01/21/enjoy-the-process"},nextItem:{title:"\ud83d\ude80 VPN Personal \xeen 3 minute",permalink:"/2018/04/20/vpn-personal-in-3-minute"}},o={authorsImageUrls:[void 0]},u=[{value:"How to test",id:"how-to-test",level:2},{value:"Project structure",id:"project-structure",level:3},{value:"User model",id:"user-model",level:3},{value:"User service",id:"user-service",level:3},{value:"TDO Utils",id:"tdo-utils",level:3},{value:"UserRead DTO",id:"userread-dto",level:3},{value:"The User Controller",id:"the-user-controller",level:3},{value:"See also the test cases:",id:"see-also-the-test-cases",level:3},{value:"Testing",id:"testing",level:3},{value:"User creation",id:"user-creation",level:4},{value:"User update",id:"user-update",level:4},{value:"User read",id:"user-read",level:3}],p={toc:u},c="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Originally written ",(0,a.kt)("a",{parentName:"p",href:"https://hackmajoris.medium.com/a-generic-dtos-mapping-in-java-11d649b8a486"},"here")),(0,a.kt)("p",null,"Sometimes you may need to use DTO's(Data Transfer Objects) in your application in order to hide some entity data(usually) in your REST'full API. For instance: You have a User entity which has some fields: username, email, password, ID.\nYou have an API which performs some CRUD operations on this entity and you want to hide user password at the moment when GET(only) operation is performed.\nFor such a feature you need to have a DTO Entity where you exclude the password field from the base Entity. You need somehow to map all the attributes from base entity to DTO entity end vice-versa\nand it is nice if you'll do this automatically without mapping the attributes manually."),(0,a.kt)("p",null,"Here is how we can achieve this using ModelMapping..."),(0,a.kt)("h2",{id:"how-to-test"},"How to test"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Download ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/hackmajoris/java-dto-mapping"},"repository"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Navigate terminal to the project root folder.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Run command "),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"}," mvn install && mvn spring-boot:run\n")))),(0,a.kt)("h3",{id:"project-structure"},"Project structure"),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://miro.medium.com/v2/resize:fit:1036/format:webp/1*Dq96nIHWOe6DPoMl1Rg2GQ.png",alt:null})),(0,a.kt)("h3",{id:"user-model"},"User model"),(0,a.kt)("p",null,"Here we have a simple User class with some attributes."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public class User {\n\n   private int id;\n   private String name;\n   private String email;\n   private String password;\n\n   public User() {}\n\n   public int getId() {\n    return id;\n   }\n\n   public void setId(int id) {\n    this.id = id;\n   }\n\n   public String getName() {\n    return name;\n   }\n\n   public void setName(String name) {\n    this.name = name;\n   }\n\n   public String getEmail() {\n    return email;\n   }\n\n   public void setEmail(String email) {\n    this.email = email;\n   }\n\n   public String getPassword() {\n    return password;\n   }\n\n   public void setPassword(String password) {\n    this.password = password;\n   }\n\n   @Override\n   public String toString() {\n    return \"User{\" +\n    \"id=\" + id +\n    \", name='\" + name + '\\'' +\n    \", email='\" + email + '\\'' +\n    \", password='\" + password + '\\'' +\n    '}';\n    }\n}\n\n")),(0,a.kt)("h3",{id:"user-service"},"User service"),(0,a.kt)("p",null,"Here is a simple User service implementation. The database connection and data persistance is not the goal at this point."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'@Service\npublic class UserService {\n\n  public DTOEntity createUser(){\n   User user = new User();\n   user.setId(1);\n   user.setName("User number 1");\n   user.setEmail("Email number 1");\n   user.setPassword("Password number 1");\n\n   return new DtoUtils().convertToDto(user, new UserCreateDTO());\n  }\n\n  public DTOEntity readUser(){\n   User user = new User();\n   user.setId(1);\n   user.setName("User number 1");\n   user.setEmail("Email number 1");\n   user.setPassword("Password number 1");\n\n   return new DtoUtils().convertToDto(user, new UserReadDTO());\n  }\n\n  public DTOEntity updateUser(DTOEntity userDTO) {\n   User user = (User) new DtoUtils().convertToEntity(new User(), userDTO);\n\n   System.out.println(user.toString());\n\n   return new DtoUtils().convertToDto(user, new UserUpdateDTO());\n  }\n}\n\n')),(0,a.kt)("h3",{id:"tdo-utils"},"TDO Utils"),(0,a.kt)("p",null,"The important part here is this utility class: "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public class DtoUtils {\n  public DTOEntity convertToDto(Object obj, DTOEntity mapper) {\n   return new ModelMapper().map(obj, mapper.getClass());\n  }\n\n  public Object convertToEntity(Object obj, DTOEntity mapper) {\n   return new ModelMapper().map(mapper, obj.getClass());\n  }\n}\n\n")),(0,a.kt)("p",null,"As you can see, here we have two methods for in/out mapping. I tried to create them as generic is possible in order to user them for all entities."),(0,a.kt)("p",null,"Now, the DTO's entities."),(0,a.kt)("h3",{id:"userread-dto"},"UserRead DTO"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public class UserReadDTO implements DTOEntity {\n\n   private String name;\n   private String email;\n\n   public UserReadDTO(){}\n\n   public String getName() {\n    return name;\n   }\n\n   public void setName(String name) {\n    this.name = name;\n   }\n\n   public String getEmail() {\n    return email;\n   }\n\n   public void setEmail(String email) {\n    this.email = email;\n   }\n}\n")),(0,a.kt)("p",null,"Here we implemented DTOEntity interface: "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public interface DTOEntity {}\n")),(0,a.kt)("p",null,"in order to have a generic mapping. So all our DTO's will implement this interface."),(0,a.kt)("p",null,"!In this entity we excluded the password field."),(0,a.kt)("h3",{id:"the-user-controller"},"The User Controller"),(0,a.kt)("p",null,"Now, that we have all needed models and helpers, our controller looks in this way:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'@RestController\n@RequestMapping("api/")\npublic class UserController {\n\n   private UserService updateService;\n\n   @Autowired\n   public UserController(UserService updateService){\n    this.updateService = updateService;\n   }\n\n   @RequestMapping(value = "/create", method = RequestMethod.POST)\n   public DTOEntity createPost(@RequestBody UserCreateDTO userCreateDTO) {  \n    return updateService.createUser();\n   }\n\n   @RequestMapping(value = "/list", method = RequestMethod.GET)\n   public DTOEntity readUser() {\n    return updateService.readUser();\n   }\n\n   @RequestMapping(value = "/update", method = RequestMethod.PATCH)\n   public DTOEntity updateUser(@RequestBody UserUpdateDTO userUpdateDTO) {\n    return updateService.updateUser(userUpdateDTO);\n   }\n}\n')),(0,a.kt)("h3",{id:"see-also-the-test-cases"},"See also the test cases:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'public class UserDtoUnitTest {\n\n@Test\npublic void userEntityToUserDto() {\n\n  // Given\n  User user = new User();\n  user.setId(1);\n  user.setEmail("user1@example.com");\n  user.setName("user1");\n  user.setPassword("user1Password");\n\n  // When\n  UserCreateDTO userCreateDTO =  (UserCreateDTO) new DtoUtils().convertToDto(user, new UserCreateDTO());\n\n  // Then\n  assertEquals(user.getEmail(), userCreateDTO.getEmail());\n  assertEquals(user.getName(), userCreateDTO.getName());\n  assertEquals(user.getPassword(), userCreateDTO.getPassword());\n }\n\n @Test\n public void userDtoToUserEntity() {\n  // Given\n  UserCreateDTO userCreateDTO = new UserCreateDTO();\n  userCreateDTO.setEmail("user1@example.com");\n  userCreateDTO.setName("user1");\n  userCreateDTO.setPassword("user1Password");\n\n  // When\n  User user =  (User) new DtoUtils().convertToEntity(new User(), userCreateDTO);\n\n  // Then\n  assertEquals(user.getEmail(), userCreateDTO.getEmail());\n  assertEquals(user.getName(), userCreateDTO.getName());\n  assertEquals(user.getPassword(), userCreateDTO.getPassword());\n }\n}\n')),(0,a.kt)("h3",{id:"testing"},"Testing"),(0,a.kt)("h4",{id:"user-creation"},"User creation"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST \\\nhttp://localhost:8080/api/create \\\n-H \'Cache-Control: no-cache\' \\\n-H \'Content-Type: application/json\' \\\n-d \'{"name":"User number 1","email":"Email number 2", "password": "userPassword"}\'\n')),(0,a.kt)("h4",{id:"user-update"},"User update"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X PATCH \\\nhttp://localhost:8080/api/update \\\n-H \'Cache-Control: no-cache\' \\\n-H \'Content-Type: application/json\' \\\n-d \'{"name":"User number 1","email":"Email number 2", "password": "pass"}\'\n')),(0,a.kt)("h3",{id:"user-read"},"User read"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X GET \\\nhttp://localhost:8080/api/list \\\n-H \'Cache-Control: no-cache\' \\\n-H \'Content-Type: application/json\' \\\n-d \'{"name":"User number 1","email":"Email number 2", "password": "pass"}\'\n')))}m.isMDXComponent=!0}}]);