<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Hackmajoris's blog Blog</title>
        <link>https://hackmajoris.github.io/</link>
        <description>Hackmajoris's blog Blog</description>
        <lastBuildDate>Sat, 17 Jun 2023 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[developers-enemy]]></title>
            <link>https://hackmajoris.github.io/2023/06/17/developers-enemy</link>
            <guid>https://hackmajoris.github.io/2023/06/17/developers-enemy</guid>
            <pubDate>Sat, 17 Jun 2023 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[🚀 Dispariția băncii Silicon Valley]]></title>
            <link>https://hackmajoris.github.io/2023/03/11/dispariția-băncii</link>
            <guid>https://hackmajoris.github.io/2023/03/11/dispariția-băncii</guid>
            <pubDate>Sat, 11 Mar 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Sursa tradusa. Sursa originala]]></description>
            <content:encoded><![CDATA[<p>Sursa tradusa. Sursa <a href="https://www.netinterest.co/p/the-demise-of-silicon-valley-bank" target="_blank" rel="noopener noreferrer">originala</a></p><p>Un articol ce merită tradus și răspândit în cât mai multe limbi, pentru a înțelege cum funcționează sistemul bancar.</p><h1>"Colapsul rapid al celei de-a 16-a celei mai mari bănci din America"</h1><h2 class="anchor anchorWithStickyNavbar_LWe7" id="când-nu-lucrezi-ce-faci-pentru-a-reduce-stresul">Când nu lucrezi, ce faci pentru a reduce stresul?"<a href="#când-nu-lucrezi-ce-faci-pentru-a-reduce-stresul" class="hash-link" aria-label="Direct link to Când nu lucrezi, ce faci pentru a reduce stresul?&quot;" title="Direct link to Când nu lucrezi, ce faci pentru a reduce stresul?&quot;">​</a></h2><p>Acesta a fost ultima întrebare la care Greg Becker, CEO al Silicon Valley Bank, a răspuns la o conferință de investitori în această săptămână.
"Ciclismu, este sfatul meu", a răspuns el. "Locuind în nordul Californiei și fiind pe peninsulă. Cred că este cea mai bună zonă cu pistă de biciclete din
lume, punct."
La trei zile după aceasta, banca lui Becker se află în administrare judiciară.</p><p>Am discutat anterior despre riscul de dobândă care pândește bilanțurile băncilor și despre modul în care industria îl gestionează. În timpul
pandemiei, băncile au primit volume record de noi depozite. Între sfârșitul anului 2019 și primul trimestru al anului 2022, depozitele la băncile
americane au crescut cu 5,40 trilioane de dolari. Cu cererea de împrumut slabă, doar aproximativ 15% din acest volum a fost canalizat către
împrumuturi; restul a fost investit în portofolii de titluri sau păstrat sub formă de numerar. Portofoliile de titluri s-au extins la 6,26 trilioane
de dolari, în creștere de la 3,98 trilioane de dolari la sfârșitul anului 2019, iar balanțele de numerar au crescut la 3,38 trilioane de dolari față
de 1,67 trilioane de dolari.</p><p>Când băncile achiziționează titluri de valoare, sunt obligate să decidă înainte dacă intenționează să le dețină până la scadență. Decizia dictează
dacă titlurile sunt desemnate ca active "ținute până la scadență" (HTM) sau ca active "disponibile pentru vânzare" (AFS). Activele HTM nu sunt marcate
la piață: băncile pot privi fără grijă cum obligațiunile pierd valoare; acestea rămân lipite de bilanț la costul amortizat indiferent. În schimb,
activele AFS sunt marcate la piață - o desemnare mai pură, dar care injectează un element de volatilitate în baza de capital a unei bănci. Pentru
băncile mai mici, reglementatorii trec cu vederea această volatilitate, dar pentru băncile cu active de peste 700 miliarde de dolari, această
volatilitate afectează direct capitalul reglementar.</p><p>Dar apoi așteptările privind rata dobânzii au început să se schimbe și prețurile obligațiunilor au început să scadă. După ce au stat pe câștigurile
neînregistrate pe piața de valori ale portofoliilor lor de valori mobiliare, băncile au început să vadă apariția pierderilor. Câștigurile
neînregistrate de 39 miliarde de dolari la sfârșitul anului 2020 pentru portofoliile AFS ale băncilor au trecut la pierderi neînregistrate de 31
miliarde de dolari la sfârșitul anului 2021.</p><p>Pentru a opri scurgerea de bani, multe bănci au reclasificat valorile mobiliare AFS ca fiind HTM. Acest lucru înseamnă recunoașterea pierderilor în
avans, dar schimbarea ar proteja balanțele de alte pierderi pe măsură ce prețurile obligațiunilor continuau să scadă. Cea mai mare bancă, JPMorgan, a
transferat 342 miliarde de dolari din valori mobiliare AFS în valori mobiliare HTM, reducând ponderea AFS la 30%. Altele au urmat: În întreaga
industrie, ponderea valorilor mobiliare deținute ca AFS a scăzut de la trei sferturi la puțin peste jumătate la sfârșitul anului 2022.</p><p>Diferite bănci au adoptat diferite strategii. JPMorgan a reținut o mulțime de numerar și a ales să gestioneze agresiv portofoliul AFS. "Vindem valori
mobiliare scumpe și cumpărăm cele ieftine", a spus CEO-ul Jamie Dimon în apelul său de câștiguri al celui de-al treilea trimestru. Fifth Third a decis
să aștepte înainte de a-și investi depozitele excedentare în valori mobiliare. "Ne permitem să fim răbdători", a spus CFO-ul său într-un apel de
câștiguri în ianuarie 2021. Fifth Third a făcut probabil mutarea prea devreme în 2022, dar totuși a reușit să obțină randamente puțin mai bune decât
băncile care au investit pe piață mai devreme.</p><p>Unele bănci au greșit complet. First Republic este una dintre acestea despre care am discutat în octombrie. O altă bancă care a greșit, evident, este
Silicon Valley Bank.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="o-privire-în-bilanțul-silicon-valley">O privire în bilanțul Silicon Valley<a href="#o-privire-în-bilanțul-silicon-valley" class="hash-link" aria-label="Direct link to O privire în bilanțul Silicon Valley" title="Direct link to O privire în bilanțul Silicon Valley">​</a></h2><p>Silicon Valley Bank a fost înființată în 1983 pentru a servi ecosistemul tehnologic în plină dezvoltare din Valea Sillicon. Reglementările revizuite
au ușurat procesul de obținere a unei licențe bancare, iar Silicon Valley Bank a devenit una dintre cele 72 de bănci noi lansate în California în acel
an. A crescut încet, supraviețuind unui colaps imobiliar care a dus la o pierdere semnificativă în 1992, înainte de a se confrunta cu boom-ul și
prăbușirea tehnologică câțiva ani mai târziu.</p><p>Silicon Valley Bank oferă companiilor tech o gamă largă de produse: servicii de depozit, împrumuturi, produse de investiții, managementul cash-ului,
finanțe comerciale și multe altele. Deoarece companiile mai tinere au tendința de a avea mai multe disponibilități de numerar decât datorii,
majoritatea banilor băncii sunt obținuți în mod tradițional din partea activității de depozit.</p><p>Impulsionată de boom-ul finanțării de capital de risc, mulți dintre clienții Silicon Valley au avut un surplus de bani în 2020 și 2021. Între
sfârșitul anului 2019 și primul trimestru al anului 2022, balanța depozitelor băncii s-a triplat, ajungând la 198 de miliarde de dolari (inclusiv o
mică achiziție a Boston Private Financial Holdings). Acest lucru se compară cu o creștere a depozitelor din industrie de „doar” 37% în perioada
respectivă. Aproximativ două treimi din depozitele erau depozite de cerere neremunerate și restul ofereau o rată mică de dobândă. În total, la
sfârșitul anului 2022, costul depozitelor Silicon Valley era de 1,17% (față de 0,04% la sfârșitul anului 2021).</p><p>Banca a investit majoritatea acestor depozite în valori mobiliare. A adoptat o strategie în două etape: să-și protejeze o parte din lichidități în
valori mobiliare disponibile pentru vânzare cu durată mai scurtă, în timp ce căuta randamentul cu o carte cu durată mai lungă deținută până la
scadență. Pe baza costului, cartea AFS cu durată mai scurtă a crescut de la 13,9 miliarde de dolari la sfârșitul anului 2019 la 27,3 miliarde de
dolari la vârf în primul trimestru al anului 2022; cartea HTM cu durată mai lungă a crescut mult mai mult: de la 13,8 miliarde de dolari la 98,7
miliarde de dolari. Parte din creștere reflectă transferul de 8,8 miliarde de dolari de valori mobiliare de la AFS la HTM, dar majoritatea reflectă
achiziții pe piață.</p><p>"Pe baza mediului actual, am plasa probabil banii în plajă de 1,65%, 1,75%", a spus CFO-ul băncii la începutul anului 2022, referindu-se la
randamentele pe care dorea să le obțină. "Majoritatea fiind garanții ipotecare ale agențiilor, garanții colaterale ipotecare, lucruri de genul
acesta."</p><p><img loading="lazy" src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2f1cc305-bb27-4a12-99f5-5f6a0c000eb4_733x478.png" class="img_ev3q"></p><p>Notă: Toate datele sunt în milioane de dolari americani, cumulate începând cu decembrie 2019; evaluările valorilor titlurilor sunt exprimate la costul
amortizat.</p><p>Problema este că atunci când ratele au început să crească, activele ipotecare au fost lovite puternic. Durata portofoliului HTM al Silicon Valley a
ajuns la 6,2 ani, la sfârșitul anului 2022, iar pierderile neînregistrate au crescut de la zero în iunie 2021, la 16 miliarde de dolari în septembrie</p><ol start="2022"><li>Aceasta reprezintă o scădere de 17% pe piața marcată. Cartea mai mică AFS a fost de asemenea afectată, dar nu la fel de rău. Pierderile marcate
la valoarea de piață au ajuns la 9% la sfârșitul lunii septembrie.</li></ol><p>Pierderile au fost atât de mari încât, din punct de vedere al valorii de piață, Silicon Valley Bank era tehnic insolvent la sfârșitul lunii
septembrie. Pierderile marcate la valoarea de piață de 15,9 miliarde de dolari ale HTM au absorbit complet cele 11,8 miliarde de dolari din capitalul
comun tangibil care a susținut bilanțul băncii.</p><p>Rețineți însă că aceste pierderi nu trebuie înregistrate în cărțile băncii, așa că CEO-ul Silicon Valley ar putea să ia bicicleta pentru o plimbare
fără griji. Deși nu este ideal pentru marja sa - în piață erau disponibile randamente mult mai mari decât cele 1,65%, 1,75% pe care banca le-a
urmărit - situația nu a fost fatală. „Vestea bună este că portofoliul de titluri valorează constant. Deci vedem aproximativ 3 miliarde de dolari pe
trimestru ”, a spus CFO-ul grupului în apelul său de câștiguri din al treilea trimestru. Va dura mult timp, dar se aștepta ca pierderile să se desfacă
pe măsură ce obligațiunile sunt răscumpărate.</p><p>Ceea ce nici CEO-ul, nici CFO-ul nu au anticipat, însă, a fost că depozitele ar putea scădea mai rapid. Ceea ce este ciudat, deoarece au văzut că
depozitele s-au redus în urmă cu 20 de ani, în urma prăbușirii dotcom, când depozitele băncii au scăzut de la 4,5 miliarde de dolari la 3,4 miliarde
de dolari la sfârșitul anului 2001, pe măsură ce clienții au utilizat rezervele lor de numerar.</p><p>Directorul de Risc poate că a observat câteva semne de îngrijorare, dar nu a stat să afle mai multe. Ea și-a părăsit poziția în aprilie 2022 (după ce
a vândut unele acțiuni în decembrie) și nu a fost înlocuită până în ianuarie 2023.</p><p>De data aceasta, depozitele au scăzut de la 198 de miliarde de dolari la sfârșitul lunii martie 2022 la 173 de miliarde de dolari la sfârșitul lui
decembrie (și la 165 de miliarde de dolari la sfârșitul lunii februarie 2023). O parte din declin reflectă o contracție la nivelul întregului sistem.
Înainte de 2022, în ultimii cincizeci de ani, în SUA s-au înregistrat doar zece trimestre de ieșiri de depozite; acum am văzut patru trimestre de
ieșiri. Dar factorii care au dus la creșterea cotei de piață a Silicon Valley Bank în timpul creșterii sunt instrumentali în pierderea cotei de piață
pe parcursul declinului.</p><p>Pentru a-și reașeza bilanțul pentru a se adapta ieșirilor de depozite și a crește flexibilitatea, Silicon Valley a vândut săptămâna aceasta 21 de
miliarde de dolari în valori mobiliare disponibile pentru vânzare pentru a obține lichidități. Deoarece pierderea (1,8 miliarde de dolari după
impozitare) va fi absorbită în poziția sa de capital reglementar, banca a trebuit să-și mărească capitalul odată cu restructurarea.</p><p>Din pacate, majorarea capitalului nu a fost realizată niciodată. Banca a ales să anunțe restructurarea bilanțului în aceeași zi în care Silvergate
Capital a anunțat că intră în lichidare voluntară. Am discutat despre Silvergate săptămâna trecută. Modelele de afaceri sunt destul de diferite, dar
provocările privind trezoreria nu sunt. Ambele bănci au avut probleme în a-și limita pierderile de obligațiuni într-un moment în care pierdeau
depozite. Temerile clienților au transformat scurgerea lentă de depozite a Silicon Valley Bank într-un val.</p><p><img loading="lazy" src="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa5164a37-e480-47a0-8870-20390a2dc885_733x478.png" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="infarct-miocardic-în-trezorerie">Infarct miocardic în trezorerie<a href="#infarct-miocardic-în-trezorerie" class="hash-link" aria-label="Direct link to Infarct miocardic în trezorerie" title="Direct link to Infarct miocardic în trezorerie">​</a></h2><p>În era digitală, nu am avut niciodată o criză bancară. Northern Rock din Marea Britanie în 2007 a fost anterior perioadei de banking mobil; este
amintit prin imagini cu deponenți care așteptau rândul (cu răbdare) în afara filialelor sale de suburbi. În 2019, un zvon fals pe WhatsApp a declanșat
o mică criză la Metro Bank, de asemenea în Marea Britanie, dar a fost localizată și rezolvată rapid. Credit Suisse a pierdut 37% din depozitele sale
într-un singur trimestru la sfârșitul anului trecut, pe măsură ce se intensificau preocupările cu privire la poziția sa financiară, cu toate acestea,
cel puțin internațional, retragerile de înaltă valoare ar fi trebuit să fie făcute prin telefon, nu prin intermediul unei aplicații.</p><p>Problema, desigur, este că procesarea unei retrageri online este mai rapidă și mai eficientă decât prin intermediul unei filiale. Și, deși imaginea
unei crize poate fi diferită, nu este mai puțin vizibilă. Ieri, Twitter a fost inundat cu povești despre firmele de capital de risc care au instruit
companiile din portofoliu să-și mute fondurile din Silicon Valley Bank. Oamenii au postat capturi de ecran ale site-ului Silicon Valley Bank care se
lupta să facă față cererii utilizatorilor. Greg Becker, CEO-ul băncii, a fost nevoit să organizeze o întâlnire cu cei mai importanți capitaliști de
risc. "Aș ruga pe toată lumea să rămână calmă și să ne susțină la fel cum v-am susținut în timpurile dificile", a spus el.</p><p><img loading="lazy" src="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F193058b9-4d70-4877-88cc-fd7b46e3ff3f_1144x2479.jpeg" class="img_ev3q"></p><p>[Editare: Conform unei ordonanțe emise de regulatorul bancar din California, Departamentul de Protecție și Inovare Financiară, clienții au inițiat retrageri de 42 de miliarde de dolari din depozitele băncii pe 9 martie 2023, echivalentul a un sfert din totalul depozitelor sale.]</p><p>Problema la Silicon Valley Bank este amplificată de baza sa relativ concentrată de clienți. În nișa sa, toți clienții săi se cunosc între ei. Și
Silicon Valley Bank nu are atât de mulți clienți. La sfârșitul anului 2022, avea 37.466 de clienți de depozite, fiecare având în cont sume de peste
250.000 de dolari. Excelent pentru recomandări când afacerea prosperă, această concentrare poate amplifica un cerc vicios când condițiile se
inversează.</p><p>Într-adevăr, pragul de 250.000 de dolari este foarte relevant. Acesta reprezintă limita pentru asigurarea depozitelor. În total, clienții cu solduri
mai mari decât aceasta reprezintă 157 miliarde de dolari din baza de depozite a Silicon Valley Bank, având în medie 4,2 milioane de dolari în cont
fiecare. Banca mai are încă 106.420 de clienți ale căror conturi sunt complet asigurate, dar aceștia controlează doar 4,8 miliarde de dolari din
depozite. În comparație cu băncile mai orientate către consumatori, baza de depozite a Silicon Valley Bank se îndreaptă foarte mult spre depozitele
neasigurate. Din totalul său de 173 de miliarde de dolari de depozite la sfârșitul anului 2022, 152 de miliarde de dolari sunt neasigurate.</p><p>Deci, cum ar fi putut banca să satisfacă cererile de retragere ale clienților?</p><p>Un lucru pe care nu l-ar fi putut face ar fi să acceseze portofoliul său de titluri deținute până la maturitate. Vânzarea unui singur bond ar declanșa
evaluarea întregului portofoliu pe piață, ceea ce banca nu ar fi avut capitalul necesar pentru a-l absorbi.</p><p>Ar fi putut să îi ademenească pe depunători înapoi cu rate mai mari (așa cum a încercat Credit Suisse). În special, Silicon Valley Bank supraveghează
161 miliarde de dolari de fonduri ale clienților în afara bilanțului (la sfârșitul lunii februarie), pe care le-ar fi putut atrage înapoi pe bilanțul
său. Dar banca oferă deja 1,17% dobândă la depozite, ceea ce este aproape de două ori mai mare decât media de 0,65% a marilor bănci din SUA. Și...
bine... peste 250.000 de dolari și nu ești asigurat.</p><p>Ar fi putut să împrumute fonduri. Anul trecut, Silicon Valley Bank a apelat la Federal Home Loan Bank of San Francisco pentru 15 miliarde de dolari și
avea capacitatea de a împrumuta mai mult. Am discutat despre Federal Home Loan Bank of San Francisco aici săptămâna trecută în contextul lui
Silvergate. Ei sunt cei care au oprit liniile lor de finanțare către Silvergate, ducându-l în lichidare. La sfârșitul anului, Silicon Valley Bank era
deja cel mai mare împrumutător al lor, reprezentând 17% din avansuri. Pentru a bloca acel împrumut, Silicon Valley Bank a trebuit să garanteze 19
miliarde de dolari în active. Problema este că nu este ieftin. Banca a plătit 4,17% pe totalul împrumuturilor pe termen scurt la sfârșitul anului
2022, din care finanțarea Federal Home Loan Bank este cea mai mare parte. În raport cu un randament de 1,79% pe portofoliul de titluri deținute până
la maturitate, nu este o afacere prea atractivă.</p><p>Toată această situație a devenit acum nulă. Criza a însemnat că ridicarea de capital pentru acoperirea pierderilor din portofoliul AFS a fost anulată,
lăsând Silicon Valley Bank subcapitalizată. Mai devreme astăzi, banca a fost închisă de către Departamentul pentru Protecția și Inovarea Financiară
din California (care a avut o săptămână aglomerată, cu Silvergate de asemenea), care a invocat lipsa de lichiditate și
insolvența. <!-- -->[Edit: Departamentul DFPI al Californiei a dezvăluit că, la închiderea activității la 9 martie, Silicon Valley Bank avea un sold negativ de numerar de aproximativ 958 de milioane de dolari și că, în ciuda încercărilor de a transfera garanții din diferite surse, nu a îndeplinit "scrisoarea de numerar" cu Federal Reserve.]</p><p>Corporația Federală de Asigurare a Depozitelor (FDIC) a fost numită curator. Toate depozitele asigurate au fost transferate la o bancă nou creată,
Banca Națională de Asigurare a Depozitelor din Santa Clara (DINB). Depozitorii neasigurați, în schimb, sunt lăsați în aer. Aceștia vor primi un "
dividend în avans" săptămâna viitoare, iar plățile ulterioare de dividende depind de vânzarea activelor Silicon Valley Bank de către FDIC.</p><p>În fericire, planul de rezoluție al Silicon Valley Bank este încă proaspăt. Banca a devenit suficient de mare în 2021, încât reglementatorii au cerut
să elaboreze un "testament viu" la fiecare trei ani. Silicon Valley Bank și-a prezentat primul astfel de document în decembrie.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="concluzie">Concluzie<a href="#concluzie" class="hash-link" aria-label="Direct link to Concluzie" title="Direct link to Concluzie">​</a></h2><p>Această situație va arunca probabil o umbră lungă asupra industriei în general. Au trecut 868 de zile de la ultima falimentare a unei bănci din SUA,
aproape de cel mai lung interval înregistrat. Între timp, consumatorii s-au obișnuit cu riscul, ceea ce se reflectă în creșterea depozitelor
neasigurate, inclusiv în portofelele digitale.</p><p>Una dintre caracteristicile crizelor bancare este că acestea rareori se repetă consecutiv. Acest lucru contează deoarece factorii de decizie au
tendința de a elabora reguli bazate pe ultima criză. Testele de stres din SUA includ diverse scenarii de credite neperformante, dar puține privind
șocurile de dobândă. Scenariul sever negativ pentru randamentele la Trezorerie pe 10 ani este de 0,8-1,5%; scenariul de bază, care reflectă o
recesiune mai ușoară, include randamente de 3,2-3,9%.</p><p>În Europa, riscul de dobândă este supravegheat de reglementatori prin Ratios de Acoperire a Lichidității (LCR). Acestea cer băncilor să dețină
suficiente active lichide de înaltă calitate (HQLA), cum ar fi datoria guvernamentală pe termen scurt, care pot fi vândute pentru a finanța băncile
într-un scenariu de stres de 30 de zile elaborat de reglementatori. Băncile trebuie să dețină HQLA echivalent cu cel puțin 100% din fluxurile de
numerar proiectate în timpul scenariului de stres.</p><p>Credit Suisse a rezistat creșterii depozitelor neașigurate cu un LCR mediu de 144% (deși a scăzut de la 192% la sfârșitul celui de-al treilea
trimestru). Silicon Valley Bank nu a fost niciodată supus cerințelor de LCR ale Federal Reserve - chiar și ca a 16-a cea mai mare bancă din America, a
fost considerată prea mică. Este o rușine. Reglementarea nu este o panaceu deoarece băncile sunt plătite să ia riscuri. Cu toate acestea, un cadru
reglementar care să se potrivească riscurilor zilei pare potrivit și este unul pentru care factorii de decizie americani pot fi acum nevoiți să se
grăbească.</p><p>plătit, vă rugăm să vă înscrieți pentru conținut săptămânal despre sectorul financiar și o arhivă voluminoasă de peste 100 de numere anterioare.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[🚀 Amazon RDS Start-Stop Scheduler with CDK and TypeScript]]></title>
            <link>https://hackmajoris.github.io/2023/01/23/rds-start-stop-scheduler</link>
            <guid>https://hackmajoris.github.io/2023/01/23/rds-start-stop-scheduler</guid>
            <pubDate>Mon, 23 Jan 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Creating a schedule for your Amazon RDS instances and clusters can help you save money on running costs, and also ensure that your database is only running when it's needed.]]></description>
            <content:encoded><![CDATA[<p>Creating a schedule for your Amazon RDS instances and clusters can help you save money on running costs, and also ensure that your database is only running when it's needed.
It applies mostly on not-prod environments, where you have multiple RDS instances and the cost of running them becomes a problem.</p><p>There are several ways to schedule your RDS instances, such as using the AWS Management Console, the AWS Command Line Interface (CLI), or a third-party tool. However, one of the most effective ways to schedule your RDS instances is by using AWS Lambda and CloudWatch Events.</p><p>In the above example, everything is created via CDK stack in TypeScript. The Lambda will stop all the instances and clusters which will be found in the AWS account and the region specified in the CDK config. The RDS instances and clusters could be filtered using the the DescribeDBInstances/DescribeDBClusters API in order to apply the scheduler on a specific instance/cluster.</p><p>First, we need to create an IAM role that has the necessary permissions to interact with the RDS service. We can do this using the CDK by creating a new IAM role and attaching a policy that grants access to the RDS service.
Next, we will create a Lambda function using the CDK. In the function, we will use the AWS SDK for JavaScript in Node.js to interact with the RDS service. We will use the describeDBInstances and describeDBClusters methods to get a list of all available RDS instances and clusters, and then we will use the startDBInstance, startDBCluster, stopDBInstance methods to start or stop the instances and clusters.
After that, we need to create a CloudWatch Event that triggers the Lambda function. We can do this by creating a new CloudWatch Event and defining a schedule for when the event should trigger. For example, we can set the event to trigger every day at 7 am, except on weekends.
Finally, we will deploy the CDK stack, and the Lambda function, IAM role, and CloudWatch Event will be created and configured in your AWS account.</p><p>By following this process, you can ensure that your RDS instances and clusters are only running when they are needed, thus reducing your running costs. It's important to test the function before applying it to production, also to monitor the function's performance and to make sure that it's working correctly.
In summary, using AWS Lambda and CloudWatch Events to schedule your RDS instances and clusters is an effective and cost-efficient way to manage your RDS instances. It also allows you to take advantage of the scalability and flexibility of the AWS Lambda service, and easily automate the process of starting and stopping your RDS instances.</p><p>Here is the CDK stack:</p><div class="language-typescript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-typescript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> </span><span class="token operator">*</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">as</span><span class="token plain"> cdk </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'aws-cdk-lib'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> </span><span class="token operator">*</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">as</span><span class="token plain"> lambda </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'aws-cdk-lib/aws-lambda'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> </span><span class="token operator">*</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">as</span><span class="token plain"> events </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'aws-cdk-lib/aws-events'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> aws_events_targets</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> CfnOutput</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> NestedStack </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"aws-cdk-lib"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> Construct </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"constructs"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> </span><span class="token operator">*</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">as</span><span class="token plain"> iam </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'aws-cdk-lib/aws-iam'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">export</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">class</span><span class="token plain"> </span><span class="token class-name">StartStopRdsStack</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">extends</span><span class="token plain"> </span><span class="token class-name">cdk</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">NestedStack </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token function" style="color:rgb(80, 250, 123)">constructor</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">scope</span><span class="token operator">:</span><span class="token plain"> Construct</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> id</span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">string</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> props</span><span class="token operator">?</span><span class="token operator">:</span><span class="token plain"> cdk</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">StackProps</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">super</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">scope</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> id</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> props</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token comment" style="color:rgb(98, 114, 164)">// Create the Lambda function to start RDS</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> startRdsInstancesLambda </span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">new</span><span class="token plain"> </span><span class="token class-name">lambda</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">Function</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">this</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'psb-rds-start-lambda'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">          runtime</span><span class="token operator">:</span><span class="token plain"> lambda</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">Runtime</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token constant" style="color:rgb(189, 147, 249)">NODEJS_14_X</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">          functionName</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'psb-rds-start-stop-lambda'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">          code</span><span class="token operator">:</span><span class="token plain"> lambda</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">Code</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">fromAsset</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"./lib/assets/functions/start-stop-rds-lambda"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">          handler</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"index.handler"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">          environment</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token string-property property">"tag"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"some-tag"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token string-property property">"info"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"Shared function for starting-stopping RDS instances"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">          </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">       </span><span class="token comment" style="color:rgb(98, 114, 164)">// Assign role to lambda to access RDS</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        startRdsInstancesLambda</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">addToRolePolicy</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">new</span><span class="token plain"> </span><span class="token class-name">iam</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">PolicyStatement</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">          effect</span><span class="token operator">:</span><span class="token plain"> iam</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">Effect</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token constant" style="color:rgb(189, 147, 249)">ALLOW</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">          actions</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token string" style="color:rgb(255, 121, 198)">"rds:DescribeDBInstances"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token string" style="color:rgb(255, 121, 198)">"rds:DescribeDBClusters"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token string" style="color:rgb(255, 121, 198)">"rds:StartDBInstance"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token string" style="color:rgb(255, 121, 198)">"rds:StartDBCluster"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token string" style="color:rgb(255, 121, 198)">"rds:StopDBInstance"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token string" style="color:rgb(255, 121, 198)">"rds:StopDBCluster"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">          </span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">          resources</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token string" style="color:rgb(255, 121, 198)">"*"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token comment" style="color:rgb(98, 114, 164)">// Create the CloudWatch Event rule for starting RDS every day at 7 AM</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> startRdsInstancesRule </span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">new</span><span class="token plain"> </span><span class="token class-name">events</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">Rule</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">this</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'psb-start-rds-instances-rule'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">          schedule</span><span class="token operator">:</span><span class="token plain"> events</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">Schedule</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">cron</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">              minute</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'0'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">              hour</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'7'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">              month</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'*'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">              weekDay</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'MON-FRI'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">          </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        startRdsInstancesRule</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">addTarget</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">new</span><span class="token plain"> </span><span class="token class-name">aws_events_targets</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">LambdaFunction</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">startRdsInstancesLambda</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token comment" style="color:rgb(98, 114, 164)">// Create  the CloudWatch Event rule for stopping RDS every day at 18 PM</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> stopRdsInstancesRule </span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">new</span><span class="token plain"> </span><span class="token class-name">events</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">Rule</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">this</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'psb-stop-rds-instances-rule'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">          schedule</span><span class="token operator">:</span><span class="token plain"> events</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">Schedule</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">cron</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            minute</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'0'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            hour</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'18'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            month</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'*'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            weekDay</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'MON-FRI'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">          </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        stopRdsInstancesRule</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">addTarget</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">new</span><span class="token plain"> </span><span class="token class-name">aws_events_targets</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">LambdaFunction</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">startRdsInstancesLambda</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>  Here is the Lambda function</p><div class="language-typescript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-typescript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> Handler </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'aws-lambda'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> </span><span class="token operator">*</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">as</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">AWS</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'aws-sdk'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> rds </span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">new</span><span class="token plain"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">AWS</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token constant" style="color:rgb(189, 147, 249)">RDS</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">enum</span><span class="token plain"> InstanceStatus </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token constant" style="color:rgb(189, 147, 249)">STOPPED</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'stopped'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token constant" style="color:rgb(189, 147, 249)">AVAILABLE</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'available'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">export</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> handler</span><span class="token operator">:</span><span class="token plain"> </span><span class="token function-variable function" style="color:rgb(80, 250, 123)">Handler</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">async</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">try</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> instances </span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">await</span><span class="token plain"> rds</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">describeDBInstances</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">promise</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token builtin" style="color:rgb(189, 147, 249)">console</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">log</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">'Found instances: '</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> instances</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">DBInstances</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">instances</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">DBInstances</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> instance </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">of</span><span class="token plain"> instances</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">DBInstances</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> identifier </span><span class="token operator">=</span><span class="token plain"> instance</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">DBInstanceIdentifier</span><span class="token operator">!</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> instanceStatus </span><span class="token operator">=</span><span class="token plain"> instance</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">DBInstanceStatus</span><span class="token operator">!</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token builtin" style="color:rgb(189, 147, 249)">console</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">log</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">${</span><span class="token template-string interpolation">identifier</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token template-string string" style="color:rgb(255, 121, 198)"> status: </span><span class="token template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> instanceStatus</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">instanceStatus </span><span class="token operator">===</span><span class="token plain"> InstanceStatus</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token constant" style="color:rgb(189, 147, 249)">STOPPED</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token builtin" style="color:rgb(189, 147, 249)">console</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">log</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token template-string string" style="color:rgb(255, 121, 198)">Starting DB Instance with identifier:  </span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">${</span><span class="token template-string interpolation">identifier</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">await</span><span class="token plain"> rds</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">startDBInstance</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> DBInstanceIdentifier</span><span class="token operator">:</span><span class="token plain"> identifier </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">promise</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">else</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token builtin" style="color:rgb(189, 147, 249)">console</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">log</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token template-string string" style="color:rgb(255, 121, 198)">Stopping  DB Instance with identifier:  </span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">${</span><span class="token template-string interpolation">identifier</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">await</span><span class="token plain"> rds</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">stopDBInstance</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> DBInstanceIdentifier</span><span class="token operator">:</span><span class="token plain"> identifier </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">promise</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> describeClusters </span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">await</span><span class="token plain"> rds</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">describeDBClusters</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">promise</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token builtin" style="color:rgb(189, 147, 249)">console</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">log</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">'Found clusters: '</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> describeClusters</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">DBClusters</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">describeClusters</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">DBClusters</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> cluster </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">of</span><span class="token plain"> describeClusters</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">DBClusters</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> identifier </span><span class="token operator">=</span><span class="token plain"> cluster</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">DBClusterIdentifier</span><span class="token operator">!</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> instanceStatus </span><span class="token operator">=</span><span class="token plain"> cluster</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">Status</span><span class="token operator">!</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token builtin" style="color:rgb(189, 147, 249)">console</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">log</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">${</span><span class="token template-string interpolation">cluster</span><span class="token template-string interpolation punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token template-string interpolation">DBClusterIdentifier</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token template-string string" style="color:rgb(255, 121, 198)"> status: </span><span class="token template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> cluster</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">Status</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">cluster</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">Status </span><span class="token operator">===</span><span class="token plain"> InstanceStatus</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token constant" style="color:rgb(189, 147, 249)">STOPPED</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token builtin" style="color:rgb(189, 147, 249)">console</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">log</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token template-string string" style="color:rgb(255, 121, 198)">Starting DB Cluster with identifier:  </span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">${</span><span class="token template-string interpolation">identifier</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">await</span><span class="token plain"> rds</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">startDBCluster</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> DBClusterIdentifier</span><span class="token operator">:</span><span class="token plain"> identifier </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">promise</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">else</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token builtin" style="color:rgb(189, 147, 249)">console</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">log</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token template-string string" style="color:rgb(255, 121, 198)">Stopping  DB Cluster with identifier:  </span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">${</span><span class="token template-string interpolation">identifier</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">await</span><span class="token plain"> rds</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">stopDBCluster</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> DBClusterIdentifier</span><span class="token operator">:</span><span class="token plain"> identifier </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">promise</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    statusCode</span><span class="token operator">:</span><span class="token plain"> </span><span class="token number">200</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    headers</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token string-property property">'Content-Type'</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'application/json'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    body</span><span class="token operator">:</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">JSON</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">stringify</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> success</span><span class="token operator">:</span><span class="token plain"> </span><span class="token boolean">true</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    isBase64Encoded</span><span class="token operator">:</span><span class="token plain"> </span><span class="token boolean">false</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">catch</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">error</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token builtin" style="color:rgb(189, 147, 249)">console</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">error</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">error</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    statusCode</span><span class="token operator">:</span><span class="token plain"> </span><span class="token number">500</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    headers</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token string-property property">'Content-Type'</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'application/json'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    body</span><span class="token operator">:</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">JSON</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">stringify</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> error</span><span class="token operator">:</span><span class="token plain"> error </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    isBase64Encoded</span><span class="token operator">:</span><span class="token plain"> </span><span class="token boolean">false</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[🚀 Enjoy the process]]></title>
            <link>https://hackmajoris.github.io/2022/01/21/enjoy-the-process</link>
            <guid>https://hackmajoris.github.io/2022/01/21/enjoy-the-process</guid>
            <pubDate>Fri, 21 Jan 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[As a software developer, I find great joy in creating new products. The process of bringing an idea to life is incredibly satisfying, and there is nothing quite like seeing your work in use by others.]]></description>
            <content:encoded><![CDATA[<p>As a software developer, I find great joy in creating new products. The process of bringing an idea to life is incredibly satisfying, and there is nothing quite like seeing your work in use by others.</p><p>One of the things I love most about developing new products is the problem-solving aspect. Each project presents its own unique set of challenges, and finding the best solutions to those challenges is a constant source of inspiration and motivation for me.</p><p>I also enjoy the collaborative nature of product development. Working with a team of talented individuals to bring a shared vision to life is incredibly rewarding. Whether it's bouncing ideas off of one another, contributing to code reviews, or simply sharing a laugh over a particularly tricky bug, the camaraderie and sense of shared accomplishment is a big part of what makes developing new products so enjoyable.</p><p>Another aspect that I find enjoyable is the opportunity to learn and grow. As technology and best practices are always evolving, I am always learning new skills and techniques that help me become a better developer. Additionally, the opportunity to experiment with new technologies and approaches is always exciting.</p><p>In short, developing new products is a challenging and rewarding experience that offers a sense of accomplishment, opportunities for problem-solving, collaboration, and learning. It's a great joy for me as a software developer, and it's what keeps me motivated to continue to push the boundaries of what's possible.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[🚀 A Java DTO mapping example️]]></title>
            <link>https://hackmajoris.github.io/A Java DTO mapping example️</link>
            <guid>https://hackmajoris.github.io/A Java DTO mapping example️</guid>
            <pubDate>Tue, 22 May 2018 00:00:00 GMT</pubDate>
            <description><![CDATA[Originally written here]]></description>
            <content:encoded><![CDATA[<p>Originally written <a href="https://hackmajoris.medium.com/a-generic-dtos-mapping-in-java-11d649b8a486" target="_blank" rel="noopener noreferrer">here</a></p><p>Sometimes you may need to use DTO's(Data Transfer Objects) in your application in order to hide some entity data(usually) in your REST'full API. For instance: You have a User entity which has some fields: username, email, password, ID.
You have an API which performs some CRUD operations on this entity and you want to hide user password at the moment when GET(only) operation is performed.
For such a feature you need to have a DTO Entity where you exclude the password field from the base Entity. You need somehow to map all the attributes from base entity to DTO entity end vice-versa
and it is nice if you'll do this automatically without mapping the attributes manually.</p><p>Here is how we can achieve this using ModelMapping...</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="how-to-test">How to test<a href="#how-to-test" class="hash-link" aria-label="Direct link to How to test" title="Direct link to How to test">​</a></h2><ul><li><p>Download <a href="https://github.com/hackmajoris/java-dto-mapping" target="_blank" rel="noopener noreferrer">repository</a></p></li><li><p>Navigate terminal to the project root folder.</p></li><li><p>Run command </p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain"> mvn </span><span class="token function" style="color:rgb(80, 250, 123)">install</span><span class="token plain"> </span><span class="token operator">&amp;&amp;</span><span class="token plain"> mvn spring-boot:run</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div></li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="project-structure">Project structure<a href="#project-structure" class="hash-link" aria-label="Direct link to Project structure" title="Direct link to Project structure">​</a></h3><p><img loading="lazy" src="https://miro.medium.com/v2/resize:fit:1036/format:webp/1*Dq96nIHWOe6DPoMl1Rg2GQ.png" class="img_ev3q"></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="user-model">User model<a href="#user-model" class="hash-link" aria-label="Direct link to User model" title="Direct link to User model">​</a></h3><p>Here we have a simple User class with some attributes.</p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">public</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">class</span><span class="token plain"> </span><span class="token class-name">User</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">   </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">private</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token plain"> id</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">   </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">private</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token plain"> name</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">   </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">private</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token plain"> email</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">   </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">private</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token plain"> password</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">   </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">public</span><span class="token plain"> </span><span class="token class-name">User</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">   </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">public</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">getId</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> id</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">   </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">   </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">public</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">void</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">setId</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token plain"> id</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">this</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">id </span><span class="token operator">=</span><span class="token plain"> id</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">   </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">   </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">public</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">getName</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> name</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">   </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">   </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">public</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">void</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">setName</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token class-name">String</span><span class="token plain"> name</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">this</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">name </span><span class="token operator">=</span><span class="token plain"> name</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">   </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">   </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">public</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">getEmail</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> email</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">   </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">   </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">public</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">void</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">setEmail</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token class-name">String</span><span class="token plain"> email</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">this</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">email </span><span class="token operator">=</span><span class="token plain"> email</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">   </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">   </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">public</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">getPassword</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> password</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">   </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">   </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">public</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">void</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">setPassword</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token class-name">String</span><span class="token plain"> password</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">this</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">password </span><span class="token operator">=</span><span class="token plain"> password</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">   </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">   </span><span class="token annotation punctuation" style="color:rgb(248, 248, 242)">@Override</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">   </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">public</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">toString</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"User{"</span><span class="token plain"> </span><span class="token operator">+</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token string" style="color:rgb(255, 121, 198)">"id="</span><span class="token plain"> </span><span class="token operator">+</span><span class="token plain"> id </span><span class="token operator">+</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token string" style="color:rgb(255, 121, 198)">", name='"</span><span class="token plain"> </span><span class="token operator">+</span><span class="token plain"> name </span><span class="token operator">+</span><span class="token plain"> </span><span class="token char" style="color:rgb(255, 121, 198)">'\''</span><span class="token plain"> </span><span class="token operator">+</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token string" style="color:rgb(255, 121, 198)">", email='"</span><span class="token plain"> </span><span class="token operator">+</span><span class="token plain"> email </span><span class="token operator">+</span><span class="token plain"> </span><span class="token char" style="color:rgb(255, 121, 198)">'\''</span><span class="token plain"> </span><span class="token operator">+</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token string" style="color:rgb(255, 121, 198)">", password='"</span><span class="token plain"> </span><span class="token operator">+</span><span class="token plain"> password </span><span class="token operator">+</span><span class="token plain"> </span><span class="token char" style="color:rgb(255, 121, 198)">'\''</span><span class="token plain"> </span><span class="token operator">+</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token char" style="color:rgb(255, 121, 198)">'}'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="user-service">User service<a href="#user-service" class="hash-link" aria-label="Direct link to User service" title="Direct link to User service">​</a></h3><p>Here is a simple User service implementation. The database connection and data persistance is not the goal at this point.</p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token annotation punctuation" style="color:rgb(248, 248, 242)">@Service</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">public</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">class</span><span class="token plain"> </span><span class="token class-name">UserService</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">public</span><span class="token plain"> </span><span class="token class-name">DTOEntity</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">createUser</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">   </span><span class="token class-name">User</span><span class="token plain"> user </span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">new</span><span class="token plain"> </span><span class="token class-name">User</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">   user</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">setId</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">   user</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">setName</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"User number 1"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">   user</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">setEmail</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"Email number 1"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">   user</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">setPassword</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"Password number 1"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">   </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">new</span><span class="token plain"> </span><span class="token class-name">DtoUtils</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">convertToDto</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">user</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">new</span><span class="token plain"> </span><span class="token class-name">UserCreateDTO</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">public</span><span class="token plain"> </span><span class="token class-name">DTOEntity</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">readUser</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">   </span><span class="token class-name">User</span><span class="token plain"> user </span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">new</span><span class="token plain"> </span><span class="token class-name">User</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">   user</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">setId</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">   user</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">setName</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"User number 1"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">   user</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">setEmail</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"Email number 1"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">   user</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">setPassword</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"Password number 1"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">   </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">new</span><span class="token plain"> </span><span class="token class-name">DtoUtils</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">convertToDto</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">user</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">new</span><span class="token plain"> </span><span class="token class-name">UserReadDTO</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">public</span><span class="token plain"> </span><span class="token class-name">DTOEntity</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">updateUser</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token class-name">DTOEntity</span><span class="token plain"> userDTO</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">   </span><span class="token class-name">User</span><span class="token plain"> user </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token class-name">User</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">new</span><span class="token plain"> </span><span class="token class-name">DtoUtils</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">convertToEntity</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">new</span><span class="token plain"> </span><span class="token class-name">User</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> userDTO</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">   </span><span class="token class-name">System</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">out</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">println</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">user</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">toString</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">   </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">new</span><span class="token plain"> </span><span class="token class-name">DtoUtils</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">convertToDto</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">user</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">new</span><span class="token plain"> </span><span class="token class-name">UserUpdateDTO</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="tdo-utils">TDO Utils<a href="#tdo-utils" class="hash-link" aria-label="Direct link to TDO Utils" title="Direct link to TDO Utils">​</a></h3><p>The important part here is this utility class: </p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">public</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">class</span><span class="token plain"> </span><span class="token class-name">DtoUtils</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">public</span><span class="token plain"> </span><span class="token class-name">DTOEntity</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">convertToDto</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token class-name">Object</span><span class="token plain"> obj</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token class-name">DTOEntity</span><span class="token plain"> mapper</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">   </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">new</span><span class="token plain"> </span><span class="token class-name">ModelMapper</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">map</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">obj</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> mapper</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">getClass</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">public</span><span class="token plain"> </span><span class="token class-name">Object</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">convertToEntity</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token class-name">Object</span><span class="token plain"> obj</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token class-name">DTOEntity</span><span class="token plain"> mapper</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">   </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">new</span><span class="token plain"> </span><span class="token class-name">ModelMapper</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">map</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">mapper</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> obj</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">getClass</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>As you can see, here we have two methods for in/out mapping. I tried to create them as generic is possible in order to user them for all entities.</p><p>Now, the DTO's entities.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="userread-dto">UserRead DTO<a href="#userread-dto" class="hash-link" aria-label="Direct link to UserRead DTO" title="Direct link to UserRead DTO">​</a></h3><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">public</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">class</span><span class="token plain"> </span><span class="token class-name">UserReadDTO</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">implements</span><span class="token plain"> </span><span class="token class-name">DTOEntity</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">   </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">private</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token plain"> name</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">   </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">private</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token plain"> email</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">   </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">public</span><span class="token plain"> </span><span class="token class-name">UserReadDTO</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">   </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">public</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">getName</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> name</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">   </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">   </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">public</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">void</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">setName</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token class-name">String</span><span class="token plain"> name</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">this</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">name </span><span class="token operator">=</span><span class="token plain"> name</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">   </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">   </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">public</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">getEmail</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> email</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">   </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">   </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">public</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">void</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">setEmail</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token class-name">String</span><span class="token plain"> email</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">this</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">email </span><span class="token operator">=</span><span class="token plain"> email</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">   </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Here we implemented DTOEntity interface: </p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">public</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">interface</span><span class="token plain"> </span><span class="token class-name">DTOEntity</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>in order to have a generic mapping. So all our DTO's will implement this interface.</p><p>!In this entity we excluded the password field.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-user-controller">The User Controller<a href="#the-user-controller" class="hash-link" aria-label="Direct link to The User Controller" title="Direct link to The User Controller">​</a></h3><p>Now, that we have all needed models and helpers, our controller looks in this way:</p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token annotation punctuation" style="color:rgb(248, 248, 242)">@RestController</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token annotation punctuation" style="color:rgb(248, 248, 242)">@RequestMapping</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"api/"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">public</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">class</span><span class="token plain"> </span><span class="token class-name">UserController</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">   </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">private</span><span class="token plain"> </span><span class="token class-name">UserService</span><span class="token plain"> updateService</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">   </span><span class="token annotation punctuation" style="color:rgb(248, 248, 242)">@Autowired</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">   </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">public</span><span class="token plain"> </span><span class="token class-name">UserController</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token class-name">UserService</span><span class="token plain"> updateService</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">this</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">updateService </span><span class="token operator">=</span><span class="token plain"> updateService</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">   </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">   </span><span class="token annotation punctuation" style="color:rgb(248, 248, 242)">@RequestMapping</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">value </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"/create"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> method </span><span class="token operator">=</span><span class="token plain"> </span><span class="token class-name">RequestMethod</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token constant" style="color:rgb(189, 147, 249)">POST</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">   </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">public</span><span class="token plain"> </span><span class="token class-name">DTOEntity</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">createPost</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token annotation punctuation" style="color:rgb(248, 248, 242)">@RequestBody</span><span class="token plain"> </span><span class="token class-name">UserCreateDTO</span><span class="token plain"> userCreateDTO</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> updateService</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">createUser</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">   </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">   </span><span class="token annotation punctuation" style="color:rgb(248, 248, 242)">@RequestMapping</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">value </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"/list"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> method </span><span class="token operator">=</span><span class="token plain"> </span><span class="token class-name">RequestMethod</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token constant" style="color:rgb(189, 147, 249)">GET</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">   </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">public</span><span class="token plain"> </span><span class="token class-name">DTOEntity</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">readUser</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> updateService</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">readUser</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">   </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">   </span><span class="token annotation punctuation" style="color:rgb(248, 248, 242)">@RequestMapping</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">value </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"/update"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> method </span><span class="token operator">=</span><span class="token plain"> </span><span class="token class-name">RequestMethod</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token constant" style="color:rgb(189, 147, 249)">PATCH</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">   </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">public</span><span class="token plain"> </span><span class="token class-name">DTOEntity</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">updateUser</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token annotation punctuation" style="color:rgb(248, 248, 242)">@RequestBody</span><span class="token plain"> </span><span class="token class-name">UserUpdateDTO</span><span class="token plain"> userUpdateDTO</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> updateService</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">updateUser</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">userUpdateDTO</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">   </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="see-also-the-test-cases">See also the test cases:<a href="#see-also-the-test-cases" class="hash-link" aria-label="Direct link to See also the test cases:" title="Direct link to See also the test cases:">​</a></h3><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">public</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">class</span><span class="token plain"> </span><span class="token class-name">UserDtoUnitTest</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token annotation punctuation" style="color:rgb(248, 248, 242)">@Test</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">public</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">void</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">userEntityToUserDto</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token comment" style="color:rgb(98, 114, 164)">// Given</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token class-name">User</span><span class="token plain"> user </span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">new</span><span class="token plain"> </span><span class="token class-name">User</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  user</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">setId</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  user</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">setEmail</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"user1@example.com"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  user</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">setName</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"user1"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  user</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">setPassword</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"user1Password"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token comment" style="color:rgb(98, 114, 164)">// When</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token class-name">UserCreateDTO</span><span class="token plain"> userCreateDTO </span><span class="token operator">=</span><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token class-name">UserCreateDTO</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">new</span><span class="token plain"> </span><span class="token class-name">DtoUtils</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">convertToDto</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">user</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">new</span><span class="token plain"> </span><span class="token class-name">UserCreateDTO</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token comment" style="color:rgb(98, 114, 164)">// Then</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token function" style="color:rgb(80, 250, 123)">assertEquals</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">user</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">getEmail</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> userCreateDTO</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">getEmail</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token function" style="color:rgb(80, 250, 123)">assertEquals</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">user</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">getName</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> userCreateDTO</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">getName</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token function" style="color:rgb(80, 250, 123)">assertEquals</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">user</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">getPassword</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> userCreateDTO</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">getPassword</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"> </span><span class="token annotation punctuation" style="color:rgb(248, 248, 242)">@Test</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">public</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">void</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">userDtoToUserEntity</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token comment" style="color:rgb(98, 114, 164)">// Given</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token class-name">UserCreateDTO</span><span class="token plain"> userCreateDTO </span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">new</span><span class="token plain"> </span><span class="token class-name">UserCreateDTO</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  userCreateDTO</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">setEmail</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"user1@example.com"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  userCreateDTO</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">setName</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"user1"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  userCreateDTO</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">setPassword</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"user1Password"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token comment" style="color:rgb(98, 114, 164)">// When</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token class-name">User</span><span class="token plain"> user </span><span class="token operator">=</span><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token class-name">User</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">new</span><span class="token plain"> </span><span class="token class-name">DtoUtils</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">convertToEntity</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">new</span><span class="token plain"> </span><span class="token class-name">User</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> userCreateDTO</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token comment" style="color:rgb(98, 114, 164)">// Then</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token function" style="color:rgb(80, 250, 123)">assertEquals</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">user</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">getEmail</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> userCreateDTO</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">getEmail</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token function" style="color:rgb(80, 250, 123)">assertEquals</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">user</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">getName</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> userCreateDTO</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">getName</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token function" style="color:rgb(80, 250, 123)">assertEquals</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">user</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">getPassword</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> userCreateDTO</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">getPassword</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="testing">Testing<a href="#testing" class="hash-link" aria-label="Direct link to Testing" title="Direct link to Testing">​</a></h3><h4 class="anchor anchorWithStickyNavbar_LWe7" id="user-creation">User creation<a href="#user-creation" class="hash-link" aria-label="Direct link to User creation" title="Direct link to User creation">​</a></h4><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token function" style="color:rgb(80, 250, 123)">curl</span><span class="token plain"> -X POST </span><span class="token punctuation" style="color:rgb(248, 248, 242)">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">http://localhost:8080/api/create </span><span class="token punctuation" style="color:rgb(248, 248, 242)">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">-H </span><span class="token string" style="color:rgb(255, 121, 198)">'Cache-Control: no-cache'</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">-H </span><span class="token string" style="color:rgb(255, 121, 198)">'Content-Type: application/json'</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">-d </span><span class="token string" style="color:rgb(255, 121, 198)">'{"name":"User number 1","email":"Email number 2", "password": "userPassword"}'</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h4 class="anchor anchorWithStickyNavbar_LWe7" id="user-update">User update<a href="#user-update" class="hash-link" aria-label="Direct link to User update" title="Direct link to User update">​</a></h4><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token function" style="color:rgb(80, 250, 123)">curl</span><span class="token plain"> -X PATCH </span><span class="token punctuation" style="color:rgb(248, 248, 242)">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">http://localhost:8080/api/update </span><span class="token punctuation" style="color:rgb(248, 248, 242)">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">-H </span><span class="token string" style="color:rgb(255, 121, 198)">'Cache-Control: no-cache'</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">-H </span><span class="token string" style="color:rgb(255, 121, 198)">'Content-Type: application/json'</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">-d </span><span class="token string" style="color:rgb(255, 121, 198)">'{"name":"User number 1","email":"Email number 2", "password": "pass"}'</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="user-read">User read<a href="#user-read" class="hash-link" aria-label="Direct link to User read" title="Direct link to User read">​</a></h3><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token function" style="color:rgb(80, 250, 123)">curl</span><span class="token plain"> -X GET </span><span class="token punctuation" style="color:rgb(248, 248, 242)">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">http://localhost:8080/api/list </span><span class="token punctuation" style="color:rgb(248, 248, 242)">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">-H </span><span class="token string" style="color:rgb(255, 121, 198)">'Cache-Control: no-cache'</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">-H </span><span class="token string" style="color:rgb(255, 121, 198)">'Content-Type: application/json'</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">-d </span><span class="token string" style="color:rgb(255, 121, 198)">'{"name":"User number 1","email":"Email number 2", "password": "pass"}'</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content:encoded>
            <category>java</category>
            <category>howto</category>
        </item>
        <item>
            <title><![CDATA[🚀 VPN Personal în 3 minute]]></title>
            <link>https://hackmajoris.github.io/2018/04/20/vpn-personal-in-3-minute</link>
            <guid>https://hackmajoris.github.io/2018/04/20/vpn-personal-in-3-minute</guid>
            <pubDate>Fri, 20 Apr 2018 00:00:00 GMT</pubDate>
            <description><![CDATA[De ce?]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="de-ce">De ce?<a href="#de-ce" class="hash-link" aria-label="Direct link to De ce?" title="Direct link to De ce?">​</a></h2><p>Dacă ai ajuns să cauți informații despre VPN, cel mai probabil dorești să îți securizezi cât de cât prezenta ta pe Internet, fie că ai motive evidente sau pur și simplu ești un simplu utilizator de Internet. Oricare ar fi motivul - folosirea unui VPN este de neevitat, vedem imediat de ce.</p><p>De câte ori ai folosit o rețea de Wireless, publică, fără nici o mică bănuială legată de riscuri sau consecințe? </p><p>Răspuns: de fiecare dată(cel mai probabil).
Cât de mici sau cât de mari pot fi riscurile folosirii unui Wireless public, depinde de acțiunile tale care le-ai făcut pe Internet, în timp ce foloseai acea rețea. Astfel de rețele sunt cele mai des vulnerabile. Sunt zeci, sau sute de utilizatori care au acces direct la acea rețea iar cafeneaua, ca proprietar al rețelei, de regulă, nu este interesată de securitate. De aceea, nu îți dorești să te trezești fără bani pe card, în cazul în care ai făcut o cumpărătură online în timp ce erai conectat la acea rețea. </p><p>Pe lângă partea de securitate și anonimitate pe Internet, VPN-ul îți oferă acces la site-uri cenzurate pe teritoriul în care te afli(de exemplu Spotify, până acum 2 luni - Romania), access la magazinele de aplicații (AppStore, GooglePlay) din alte regiuni și alte posibile facilități de acest gen. </p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="cum">Cum?<a href="#cum" class="hash-link" aria-label="Direct link to Cum?" title="Direct link to Cum?">​</a></h2><p>Există zeci de aplicații care oferă servicii VPN pentru mobile cât și pentru alte platforme. Cele mai evidente probleme pe care le oferă sunt: prețul, anonimitatea, lipsa controlului asupra propriului trafic. Singurul serviciu de acest gen, în care am încredere este <a href="https://www.tunnelbear.com/pricing" target="_blank" rel="noopener noreferrer">TunellBear</a>.  Sugerez să-l folosiți în cazul în care aveți nevoie de un VPN și nu vă aranjeză soluția propusă mai jos. Acest serviciu oferă 500MB gratis, lunar, iar pentru un trafic nelimitat - prețul este de 10 USD. Mai jost o să vedem cum putem obține așa ceva cu resurse mai puține.</p><p>! Soluția de mai jos este pentru utilizatorii de rând. Nu necesită cunoștințe în nici un domeniu. Necesită doar dorința de a te proteja atunci când folosești Internet.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="de-ce-avem-nevoie">De ce avem nevoie:<a href="#de-ce-avem-nevoie" class="hash-link" aria-label="Direct link to De ce avem nevoie:" title="Direct link to De ce avem nevoie:">​</a></h3><ul><li>Un cont pe <a href="https://www.digitalocean.com" target="_blank" rel="noopener noreferrer">DigitalOcean</a></li><li>Să pornim un Droplet pe <a href="https://www.digitalocean.com" target="_blank" rel="noopener noreferrer">DigitalOcean</a></li><li>Să configurăm VPN-ul pe acel Droplet.</li><li>Să configurăm device-urile pentru a folosi acel VPN.</li></ul><p>Să începem.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="creare-cont-pe-digitalocean">Creare cont pe DigitalOcean.<a href="#creare-cont-pe-digitalocean" class="hash-link" aria-label="Direct link to Creare cont pe DigitalOcean." title="Direct link to Creare cont pe DigitalOcean.">​</a></h3><p>Cel mai basic Droplet pe DigitalOcean - ne costă 5 USD/lună. Acesta are:</p><ul><li>Memorie RAM: 1GB</li><li>Disk: 25GB SSD</li><li>Transfer: 1TB</li><li>CPU: 1 Core</li></ul><p>Ce ne interesează aici este capacitatea de transfer - 1 TB / lună este de cele mai multe ori îndeajuns pentru un utilizator mediu. </p><p>Pentru a primi 10 USD credit la înregistrare, da-ți click <a href="https://m.do.co/c/6f4b7837cd02" target="_blank" rel="noopener noreferrer">aici</a>. Acesta vă va oferi 2 luni de acces gratuit, în cazul în care nu aveți încă cont.</p><p>Mai departe.... </p><ol><li><p>Apăsăm butonul - Create
<img loading="lazy" src="https://www.dropbox.com/s/89pf6jpt80qegem/1.png?raw=1" class="img_ev3q"></p></li><li><p>Alegem creare Droplet nou
<img loading="lazy" src="https://www.dropbox.com/s/1s8oxsfx5iaq1ck/2.png?raw=1" class="img_ev3q"></p></li><li><p>Selectăm One-click apps
<img loading="lazy" src="https://www.dropbox.com/s/tuz4apyy2dnum62/3.png?raw=1" class="img_ev3q"></p></li><li><p>Selectăm tipul
<img loading="lazy" src="https://www.dropbox.com/s/83ul7cctr7bjcw8/4.png?raw=1" class="img_ev3q"></p></li><li><p>Selectăm resursele
<img loading="lazy" src="https://www.dropbox.com/s/wxxc48xm0itv55z/5.png?raw=1" class="img_ev3q"></p></li><li><p>Selectăm locația<br>
<img loading="lazy" src="https://www.dropbox.com/s/q9jkwo36osl2jze/6.png?raw=1" class="img_ev3q"></p></li><li><p>Dăm un nume la host
<img loading="lazy" src="https://www.dropbox.com/s/xjoeztg9lf2gip4/7.png?raw=1" class="img_ev3q"></p></li><li><p>Accesăm consola
<img loading="lazy" src="https://www.dropbox.com/s/o72r5v9dwxyb5nl/8.png?raw=1" class="img_ev3q"></p></li><li><p>După ce am schimbat parola de accesare a Droplet-ului, scrim  următoarea comandă:</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token assign-left variable" style="color:rgb(189, 147, 249);font-style:italic">CID</span><span class="token operator">=</span><span class="token variable" style="color:rgb(189, 147, 249);font-style:italic">$(</span><span class="token variable function" style="color:rgb(80, 250, 123);font-style:italic">docker</span><span class="token variable" style="color:rgb(189, 147, 249);font-style:italic"> run -d --restart</span><span class="token variable operator" style="color:rgb(189, 147, 249);font-style:italic">=</span><span class="token variable" style="color:rgb(189, 147, 249);font-style:italic">always --privileged -p </span><span class="token variable number" style="color:rgb(189, 147, 249);font-style:italic">1194</span><span class="token variable" style="color:rgb(189, 147, 249);font-style:italic">:1194/udp -p </span><span class="token variable number" style="color:rgb(189, 147, 249);font-style:italic">443</span><span class="token variable" style="color:rgb(189, 147, 249);font-style:italic">:443/tcp jpetazzo/dockvpn</span><span class="token variable" style="color:rgb(189, 147, 249);font-style:italic">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Va trebui să așteptați pentru a se descărca toate dependențele.</p></li></ol><p>Consola o să arate undeva așa:
<img loading="lazy" src="https://www.dropbox.com/s/ftl6co5y5wjg3rx/9.png?raw=1" class="img_ev3q"></p><ol start="10"><li><p>După, scriem în consolă comanda</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token function" style="color:rgb(80, 250, 123)">docker</span><span class="token plain"> run -t -i -p </span><span class="token number">8080</span><span class="token plain">:8080 --volumes-from </span><span class="token variable" style="color:rgb(189, 147, 249);font-style:italic">$CID</span><span class="token plain"> jpetazzo/dockvpn serveconfig</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>După executare, în consolă vom vedea o adresă, de genul: 0.0.0.0:8080 (La fiecare va fi diferită)</p></li><li><p>Mergem în Browser, și accesăm acea adresă.</p></li></ol><p>Accesând resursa, în mod normal, Browserul se va plânge din cauza securității. Ignorăm acea plângere - descarcam fisierul.</p><p><img loading="lazy" src="https://www.dropbox.com/s/vsxw4ur59qsqe90/10.png?raw=1" class="img_ev3q">
<img loading="lazy" src="https://www.dropbox.com/s/nokabrhe7q0sjh9/11.png?raw=1" class="img_ev3q"></p><p>După descărcare, redenumim fișierul în așa fel încât acesta să aibă extensia .ovpn
<img loading="lazy" src="https://www.dropbox.com/s/4p1xny119pbs5je/12.png?raw=1" class="img_ev3q"></p><ol start="12"><li><p>Descărcăm aplicația-client pentru platforma pe care o folosim. Sunt diferite aplicații de genul VPN-client prin care ne-am putea conecta la serverul de VPN creat mai sus. Vom folosi <a href="https://openvpn.net/index.php/open-source/downloads.html" target="_blank" rel="noopener noreferrer">OpenVPN</a>. Simplu de folosit și are și suport pentru toate platformele. Mai jos, o să vedem cum putem configura clientul pe macOS și iOS. Pe Windows, Linux, Android, etc - e aceeași procedură.</p></li><li><p><a href="https://openvpn.net/index.php/open-source/downloads.html" target="_blank" rel="noopener noreferrer">Descărcăm</a> clientul dacă nu am făcut-o și îi dăm fișierul de .ovpn descărcat anterior, după care ne conectăm.
<img loading="lazy" src="https://www.dropbox.com/s/yeoivmd8ldxdtki/13.png?raw=1" class="img_ev3q"></p></li><li><p>După o conexiune reușită, navigăm pe <a href="https://whatismyipaddress.com" target="_blank" rel="noopener noreferrer">whatismyipaddress.com</a> și convingem că VPN-ul își face treaba. 😊</p></li></ol><h3 class="anchor anchorWithStickyNavbar_LWe7" id="configurare-vpn-client---ios">Configurare VPN client - iOS<a href="#configurare-vpn-client---ios" class="hash-link" aria-label="Direct link to Configurare VPN client - iOS" title="Direct link to Configurare VPN client - iOS">​</a></h3><ul><li>Instalăm <a href="https://itunes.apple.com/us/app/openvpn-connect/id590379981?mt=8" target="_blank" rel="noopener noreferrer">OpenVPN Connect</a></li><li>Deschidem aplicația, și introducem același adresă de IP:
<img loading="lazy" src="https://www.dropbox.com/s/wjb0akzuha2t3id/14.png?raw=1" class="img_ev3q"></li><li>Deschidem fișierul cu applicația OpenVPN
<img loading="lazy" src="https://www.dropbox.com/s/gwqfmzj8j3sz6x6/15.jpg?raw=1" class="img_ev3q"></li><li>Instalăm certificatul
<img loading="lazy" src="https://www.dropbox.com/s/0knsibq6cajhsfc/16.jpg?raw=1" class="img_ev3q"></li><li>Ne conectăm
<img loading="lazy" src="https://www.dropbox.com/s/z5ckietmjora1pg/17.jpg?raw=1" class="img_ev3q"></li><li>Verificăm pe <a href="https://whatismyipaddress.com" target="_blank" rel="noopener noreferrer">whatismyipaddress.com</a></li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="important">Important<a href="#important" class="hash-link" aria-label="Direct link to Important" title="Direct link to Important">​</a></h2><p>După ce am configurat toate device-urile, ne întoarcem la consola Dropletului de pe DigitalOcean, și dăm un Ctrl/Cmd+c pentru a opri ultimul container pornit, în așa fel, nimeni nu va mai putea descărca fișierul(.ovpn) descărcat mai sus dacă va accesa IP-ul Droplet-ului. </p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="cat-te-costă">Cat te costă?<a href="#cat-te-costă" class="hash-link" aria-label="Direct link to Cat te costă?" title="Direct link to Cat te costă?">​</a></h2><p>Soluția dată poate fi hostată și pe un server local, dacă acesta există. Dacă nu - metoda descrisă mai sus te va costa 5 USD/lună(nu uita - primele 2 luni le ai gratuit dacă te-ai înregistrat folosind link-ul menționat mai sus).  </p><p>Cam asta este tot, </p><p>May the security be with you. 😋</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[🚀 Despre Lightning Network]]></title>
            <link>https://hackmajoris.github.io/2018/01/29/despre-lightning-network</link>
            <guid>https://hackmajoris.github.io/2018/01/29/despre-lightning-network</guid>
            <pubDate>Mon, 29 Jan 2018 00:00:00 GMT</pubDate>
            <description><![CDATA[Articol tradus. Sursa originală]]></description>
            <content:encoded><![CDATA[<p>Articol tradus. Sursa <a href="https://medium.com/@x0100/%EF%B8%8Flightning-network-7c618c9cd68" target="_blank" rel="noopener noreferrer">originală</a></p><p>Lighting Network = LN</p><p>În partea 0 vom vedea, de ce este nevoie de așa ceva.
În partea 1 vom explica cum se desfășoară toate plățile în rețeaua Bitcoin, Lightning Network și problemele care se regăsesc. În partea 2 vom introduce componentele de bază din care e construit LN. În partea 3, în sfârșit vom descrie în detaliu cum sunt procesate plățile în protocolul LN. În a 4 parte, în mod rapid vom vorbi despre criticile care se regăsesc și comisionale existente. În partea 5, vom face un mic sumar.</p><p>!În mod conștient renunț/simplific unele momente tehnice. Încă nu sunt expert și pot să mă înșel în unele afirmări.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="0-de-ce">0. De ce?<a href="#0-de-ce" class="hash-link" aria-label="Direct link to 0. De ce?" title="Direct link to 0. De ce?">​</a></h2><p><strong>Bitcoin Blockchain</strong> - are la bază o bază date descentralizată, în care se salvează toate tranzacțiile din rețeaua Bitcoin. Pâna aici, ”toate tranzacțiile” este o parte destul de fundamentală la acest protocol. Ca întreg sistem să fie întradevăr descentralizat, și totodată funcționeze fără vreo oarecare eroare, trebuie, ca toate miile de noduri din rețea să re-verifice și să salveze toate tranzacțiile. Acest lucru, în mod clar, nu duce la o scalare: Blockchain ocupă zeci de Gigabytes pe disk, minerii folosesc mai mult curent decât are nevoie unele țări, blocurile sunt suprasolicitate, comisioanele cresc, oamenii înjură și fac fork la Bitcoin. Din aceaste cauze, la moment, în mod activ se construiesc soluții alternative. Una dintre aceste soluții este Lightning Network.</p><blockquote><p lang="en" dir="ltr">Q: When will the Lightning Network be rolled out? A: The rollout has already begun. This is an iterative distributed learning process; it's unlikely there will be a single point in time at which we say LN is "deployed" because it will grow organically. Software is never finished.</p>— Jameson Lopp (@lopp) <a href="https://twitter.com/lopp/status/947808940255006726?ref_src=twsrc%5Etfw" target="_blank" rel="noopener noreferrer">January 1, 2018</a></blockquote><h3 class="anchor anchorWithStickyNavbar_LWe7" id="1-ideea">1. Ideea<a href="#1-ideea" class="hash-link" aria-label="Direct link to 1. Ideea" title="Direct link to 1. Ideea">​</a></h3><p>Idea de soluționare a problemei de la nivelului doi (second layer solution), la care se referă LN, sună foarte simplu:</p><blockquote>În loc să se salveze și să se verifice toate tranzacțiile în Blokchain, vom realiza o mare parte din plăți în afara rețelei Blockchain, iar în Blockchain vom sincroniza din timp în timp balanțele și vom rezolva conflictele. De funționat toate acestea vor funcționa, ca deobicei cu ajutorul criptomagiei.</blockquote><p>Sună bine, însă nu știm cum toate acestea funcționează.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="11-canalul-de-plată">1.1. Canalul de plată<a href="#11-canalul-de-plată" class="hash-link" aria-label="Direct link to 1.1. Canalul de plată" title="Direct link to 1.1. Canalul de plată">​</a></h3><p>Să începem prin a simplifica viața a două persoane, Alisa și Bob, care foarte des se plătesc între ei. Se oferă următoarea schema:</p><ol><li>Alisa și Bob trimit depozituri la adresa o adresă comună care se administrează cu ajutorul a două chei private.</li><li>Fiecare din ei, crează o tranzacție specială - Smart Contract(da, Bitcoin dispune de Smart-Contracts, despre asta în partea următoare). Această tranzacție este corectă, dar încă nu este scrisă în Blochain.</li><li>De la început, tranzacția conține informație conform căreia, Alisa și Bob pot lua înapoi depozitele lor.</li><li>Cand Alisa se achită cu Bob, printr-o înțelegere comună -updatează informația din aceste tranzacții. Alisa acceptă să primească mai puțină valoare din propriul depozit, iar Bob - mai multă. Defapt, aceste tranzacții reprezintă niste obligațiuni(IOU, I owe you)</li><li>În așa mod, ei pot schimba între ei sume nu foarte mari(în limitele depozitelor lor), măcar până la nesfârșit.</li><li>La un anumit moment, oricare din părți, poate să ceară să se achite pentru totdeauna. Atunci Lisa(sau Bob) pur și simplu înscriu tranzacția finală în Blockchain-ul principal și primesc suma depozitului împreună cu suma provenită din plățile care au fost făcute către acest depozit. </li></ol><p>Punctele 1-3 din această schemă se numesc deschiderea canalului de plătă/plăți(payment channel). Punctele 4 și 5 - folosirea canalului. Punctul 6 - închiderea canalului de plată/plăți.</p><blockquote>👍 În blockchain se înscriu doar două tranzacții: tranzacția de depozitare, în care are loc deschiderea canalului de plată și tranzacția finală(închiderea canalului). Toate tranzacțiile interemediare dintre aceste două tranzacții nu se folosesc de Blockchain și nu sunt salvate în acesta, de aceea acestea sunt făcute fără nici un cost(comision) și sunt momentane.</blockquote><h3 class="anchor anchorWithStickyNavbar_LWe7" id="12-rețeaua-de-canale-de-plată">1.2. Rețeaua de canale de plată<a href="#12-rețeaua-de-canale-de-plată" class="hash-link" aria-label="Direct link to 1.2. Rețeaua de canale de plată" title="Direct link to 1.2. Rețeaua de canale de plată">​</a></h3><p>Canalele de plăți între două persoane - nu este ceva foarte util. La urma urmei, cu marea majoritate a oamenilor noi nu facem tranzacții regulare. Dar...</p><blockquote>💡 Cand canalele de plată formează o rețea, se ivește posibilitatea de a face plăți între fiecare utilizator al rețelei, către care există o legătură în graful acestei rețele(chiar dacă ei nu au legătură directă unul cu altul). Aceasta și este ideea de bază a Lighting Network.</blockquote><p>Așa arată graful canalelor de plată, în momentul 22.01.2018: (<a href="https://lnmainnet.gaben.win" target="_blank" rel="noopener noreferrer">https://lnmainnet.gaben.win</a>).
<img loading="lazy" src="https://cdn-images-1.medium.com/max/1600/1*vYgP4rEOttWssox5l-LGig.png" class="img_ev3q"></p><p>În principiu, analog protocolului TCP, unui om simplu îi este îndeajuns să aibă doar un singur canal deschis, ca acesta să poată să utilizeze tranzacții cu oricine. Desigur, este nevoie să se caute și segmentul cel mai optim între doi utilizatori, și mai trebuie cumva să se motiveze participanții rețelei ca aceștia să verifice tranzacțiile străine. Dar, sa începem cu problema de bază: problema încrederii.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="13-problema-încrederii">1.3. Problema încrederii<a href="#13-problema-încrederii" class="hash-link" aria-label="Direct link to 1.3. Problema încrederii" title="Direct link to 1.3. Problema încrederii">​</a></h3><p>Cum se întâmplă des în criptografie, sistema canalelor de plată este foarte simplu de imaginat, dacă toate parțile au încredere între ele. Nu este nevoie să îngrădim grădina cu depozite, chei private, tranzacții speciale. Se poate simplu de scris doar cui și cu cât este cineva dator.
Următorul lucru de înțeles: cum putem realiza un canal de plăți fără a avea încredere între parți?
Problemele de bază for fi trei.</p><ol><li>Ambele depozite, ale Alisei și Bob se află întrun portofel virtual comun. Dacă Bob nu va fi deacord să semneze tranzacția, cum Alisa își va întoarce depozitul ei?</li><li>În procesul de calculare, sunt create multiple versiuni ale oblicațiunilor. Să presupunem că, practic, Alisa îl plătește pe Bob. Atunci, în versiunea finală a tranzacției, Bob va primi un depozit mai mare decât depozitul lui inițial iar Alisa - mai puțin. Dar Alisa poate înșela și poate înscrie singură în Blockchain prima versiune validă a tranzacției, ca și cum Bob niciodată nu a primit bani. Cu ce va rămâne Bob?</li><li>Dacă Alisa și Bob, transferă banii prin rețea folosind o a treia persoană - Victor, atunci cum ei pot fi siguri că Victor întradevăr va transmite banii și nu îi va lua lui?</li></ol><p>Să numim aceste probleme corespunzător: </p><ul><li>problema depozitului comun</li><li>problema ultimei tranzacții</li><li>problema persoanei terțe</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2-smart-contractszaqwa-p0o9azza">2. Smart-contractsz<code>~~aqwa</code>=-[p0o9az`~ZA;./"|<a href="#2-smart-contractszaqwa-p0o9azza" class="hash-link" aria-label="Direct link to 2-smart-contractszaqwa-p0o9azza" title="Direct link to 2-smart-contractszaqwa-p0o9azza">​</a></h2><blockquote><p>≤
Bitcoin are suport pentru un limbaj simplu al smart-contractelor - Script. În fiecare tranzacție Bitcoin există un câmp special, care conține un script scris în acest limbaj. Acest script verifică, după aplicarea a căror reguli, ieșirea tranzacției poate fi folosită.
”Folosirea ieșirei tranzacției A” - este un mod mult mai corect tehnic spus ”folosirea banilor din adresa/portofelul K, unde aceștia au fost depuși cu ajutorul tranzacției A”</p></blockquote><blockquote>☝ În comparație, de exemplu, cu Ethereum, posibilitățile smart-contractelor Bitcoin sunt cu mult mai limitate. Este legat acest lucru de Script, și anume că acesta nu este destul pentru Turing. De exemplu, în acesta nu se poate folosi cicluri/recursivitate și nu se poate crea variabile(lipsa memoriei).</blockquote><p>Să vedem cele mai importante operații ale acestui limbaj.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="21-autorizația">2.1 Autorizația<a href="#21-autorizația" class="hash-link" aria-label="Direct link to 2.1 Autorizația" title="Direct link to 2.1 Autorizația">​</a></h3><p>Probail, partea cea mai standard a oricărei tranzacții - este verificarea semnăturii. Să presupunem că tranzacția A, transferă resurse la o oarecare adresă K. Ca să fie cheltuite resursele din K, trebuie să se demonstreze deținerea cheii(cheia privată). De acest lucru răspunde operația <strong>OP_CheckSig</strong>. Dar, după dorință, se poate verifica și ceva adaugător. De exemplu, se poate verifica, că persoana deține un număr secret, iar hash-ul este egal cu acel număr. Pentru aceasta, este nevoie de două operațiuni: <strong>OP_SHA256</strong>(citește hash-ul) și <strong>OP_EqualVerify</strong>(verifică egalitatea). De ce avem nevoie de toate acestea, va fi clar în partea 4.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="22-cooperarea">2.2. Cooperarea<a href="#22-cooperarea" class="hash-link" aria-label="Direct link to 2.2. Cooperarea" title="Direct link to 2.2. Cooperarea">​</a></h3><p>Un alt exemplu simplu de smart-contract la Bitcoin se bazează pe operația <strong>OP_CheckMultiSig</strong>. Aceasta permite să se folosească resursele doar prin semnarea câtorva chei predefinite. Pe acest principiu funționează așa spusele ”multiple signature wallets”. La fel ca și celula unei bănci, care este încuiată cu două chei, una aflându-se la angajatorul băncii iar alta la client.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="23-perioadele">2.3. Perioadele<a href="#23-perioadele" class="hash-link" aria-label="Direct link to 2.3. Perioadele" title="Direct link to 2.3. Perioadele">​</a></h3><p>Bitcoin are suport și pentru operația <strong>OP_CheckSequesnceVerify</strong>, care permite folosirea resurselor doar peste un număr fix de blocuri. De exemplu, aceasta permite educarea oamenilor, care nu pot salva resursele. Blockchain este mai eficient decât oricare cont de economii: dacă utilizatorul a decis să înghețe suma acumulată pe o anumită perioadă, această sumă va fi înghețată garantat. Dar, pe lângă acest scenariu, <strong>OP_CheckSequenceVerify</strong>, și alte componente, în mod activ se folosesc pentru realizarea canalelor de plăți.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3-realizarea-canalului">3. Realizarea canalului<a href="#3-realizarea-canalului" class="hash-link" aria-label="Direct link to 3. Realizarea canalului" title="Direct link to 3. Realizarea canalului">​</a></h2><p>Acum, când toate blocurile de control sunt la locul lor, se poate descrie unele detalii ale funcționării canalului de plată.  Defapt, unele imaginări ale canalului de plăți, au fost descrise încă de Satoshi. Eu ma voi axa mai mult pe specificația, care se numește Poon-Dryja payment channels(după părerea autorilor principali Lightning Network).</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="31-deschiderea-canalului">3.1. Deschiderea canalului<a href="#31-deschiderea-canalului" class="hash-link" aria-label="Direct link to 3.1. Deschiderea canalului" title="Direct link to 3.1. Deschiderea canalului">​</a></h3><ol><li>Alisa și Bob crează tranzacții, care depun resursele într-o adresă de depozit comun. Să presupunem că X bitcoins se transferă din portofelul Alisei, și Y - din portofelul lui Bob. Resursele din depozitul comun pot fi folosite doar prin semnarea împreună a cheilor private ale Alisei și Bob. (OP_CheckMultiSig). </li><li>Primul truc, se evidențiază prin aceea că ei încă NU semnează și NU transmit tranzacția în Blockchain(dealtfel, Bob o poate minți pe Lisa și poate să-i înghețe rezursele pe veșnicie).)</li><li>În loc de acestea, Alisa și Bob crează două noi tranzacții de retur a depozitului initial. Intrarea acestor tranzacții sunt resursele din depozitul comun(ieșirea tranzacției 0). Ieșiri ale tranzacțiilor sunt două: X se duce înapoi la adresa Alisei, Y - la adresa lui Bob. În realitate, toate acestea sunt un pic mai dificile, dar despre asta, un pic mai târziu.</li><li>Mai departe, Bob, semnează tranzacția A1 și o transmite către Alisa. Alisa semnează tranzacția B1 și o trimite lui Bob.</li><li>În acest moment, tranzacția de depunere a depozitului, se poate înscrie în Blockchain, nimeni nu minte. Dacă Bob va fi deacord să coopereze, Alisa oricând poate semna tranzacția A1, să o înscrie în Blockchain și să obțină depozitul acesteia înapoi.</li></ol><p>În acest moment ”problema depozitului comun” este rezolvată. Deschiderea canalului de plată poate ave loc fără a avea încredere în cealaltă persoană.</p><blockquote>☝ Un fapt interesant. Încă cu jumătate de an în urmă(înainte de a se introduce SegWit) semnarea tranzacțiilor neconfirmate(punctul 4) avea loc mult mai greu, din cauza problemei maleabilitatății(transaction malleability)</blockquote><h3 class="anchor anchorWithStickyNavbar_LWe7" id="32-folosirea-canalului">3.2 Folosirea canalului<a href="#32-folosirea-canalului" class="hash-link" aria-label="Direct link to 3.2 Folosirea canalului" title="Direct link to 3.2 Folosirea canalului">​</a></h3><p>Plățile din interiourul canalului se realizează defapt prin re-rescrierea tranzacției A1 și B1 în noi tranzacții.</p><ol><li>Alisa îl plătește pe Bob pentru o cafea, care costă C.</li><li>Tot Alisa, este deacord că, la închiderea canalului de plată ea va lua înapoi, nu suma depusa la început X, ci X' = (X - C).</li><li>Iar Bob: Y' = (Y + C).</li></ol><p>Deasemenea, noile tranzacții A2 și B2 vor arăta la fel ca A1 și B1, doar că cu sume noi. Fiecare din părți, poate în orice moment să închidă canalul de plată, scriind ultima versiune a tranzacției în Blockchain.</p><p>Cum ne asigurăm că Alisa nu va scrie în Blockchain tranzacția A1  în loc de tranzacția A2? Pentru aceasta, exista încă un truc.</p><ol><li>De fiecare dată când Alisa și Bob crează noi tranzacții, ei aleg o cheie privată de unică folosință, de care au nevoie ca să poată lua depozitul înapoi(OP_CheckSig).</li><li>La fiecare plată i, Alisa îi va arăta lui Bob cheia privată precedentă AK(i-1), și va crea o nouă cheie AKi pentru noua tranzacție. Bob nu va accepta plata făra cheia anterioară.</li><li>Dacă Bob știe cheia, atunci acesta poate cheltui toți banii Alisei, doar dacă Alisa va decide să înscrie tranzacția greșită în Blockchain.</li><li>În așa fel, Alisa întodeauna este interesată de a înscrie în Blockchain tranzacția corectă, adică utlima.</li></ol><p><em>Modificare minoră</em>
Pentru ca Bob să aibă posibilitatea să dispute tranzacția cu Alisa și să obțină cheia acesteia, Bob are nevoie de timp. De aceea, Alisa, va obține depozitul ei nu în același timp, dar după câteva blocuri T(OP_CheckSequenceVerify). De exemplu, peste 48 blocuri, adică peste 8 ore.</p><p>Dacă Alisa semnează una din tranzacțiile ei(ele sunt semnate deja de Bob), și transmite această tranzacție în Blockchain, atunci pot avea loc două scenarii.</p><ol><li>Alisa emite tranzacția finală =&gt; Bob nu cunoaște utlima cheie a Alisei Aki. Aceasta este o închidere corectă a canalului, toți trebuie să primească banii lor înapoi. Alisa îi va primi peste ceva timp.</li><li>Alisa încearcă să semneze tranzacția veche în loc de cea nouă, finală =&gt; Alisa încearcă să-l mintă pe Bob. În acest caz, Bob cunoaște cheia lui Alisa și acesta poate să o folosească pentru a primi toată suma Alisei. Este clar că, Alisa nu este interesată în acest scenariu.</li></ol><p>Așadar, ”problema ultimei tranzacții” este la fel - rezolvată și canalul de comunicare între două persoane este în regulă. Acum, deasemenea, devin evidente câteva avantaje și neajunsuri.</p><p>👍 <strong>Avanteje:</strong></p><ol><li>Plățile din interiorul canalului sunt instante și gratis, ele nu duc la solicitarea Blockchain-ului principal. </li><li>Părțile nu sunt obligate să aibă încredere una în alta.</li></ol><p>👎 <strong>Neajunsuri</strong></p><ol><li>Depozitele sunt blocate pe toată perioada existenții canalului.</li><li>Fiecare dintre părți, trebuie periodic să se ivească online(cel puțin o dată-n T)</li></ol><p>👌 În realitate, ambele neajunsuri sunt necesare pentru canalele de plăți între două persoane, dar nu prea sunt importante pentru LN. Primul neajuns încetează să mai fie neajuns dacă un canal de plăți poate fi folosit pentru tranzacții cu alte persoane.
Al doilea neajuns lipsește în LN, așa cum verificarea corectitudinei poate fi făcută de oricare utilizator al rețelei( dacă Vasile va observa țeapa Alisei, atunci acesta va împărți cu Bob valoarea confiscată.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4-lightning-network">4. Lightning Network<a href="#4-lightning-network" class="hash-link" aria-label="Direct link to 4. Lightning Network" title="Direct link to 4. Lightning Network">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="41-canalul-de-plăți-printr-o-persoană-terță">4.1. Canalul de plăți printr-o persoană terță<a href="#41-canalul-de-plăți-printr-o-persoană-terță" class="hash-link" aria-label="Direct link to 4.1. Canalul de plăți printr-o persoană terță" title="Direct link to 4.1. Canalul de plăți printr-o persoană terță">​</a></h3><p>Să presupunem acum că Alisa și Bob nu au un canal deschis între ei, dar ei, ambii au un canal deschis cu Victor. Alisa poate fără probleme să trimită bani lui Victor, iar Victor fără probleme poate trimite banii lui Bob.
Dar, cum să fim siguri, că Victor, obținând banii, întradevăr îi va trimite mai departe lui Bob?</p><p>În realitate, ideea este foarte similară cu trucul anterior, doar că în loc de cheile de unică folosință se folosește un oarecare număr secret.</p><ol><li>Bob generează un număr secret S, hash-ul al acestei chei HS și transmite această informație Alisei. HS în acest caz poate fi folosit ca un bon de plată virtual.</li><li>Alisa crează tranzacția AV, care transmite banii lui Victor, numai în cazul în care Victor va oferi numărul secret S. Pentru aceasta, Alisa folosește un script, care verifică egalitatea hash-ului oferit de numărul și valoarea HS(aici se folosește operația OP_SHA256 și OP_EqualVerify).</li><li>Victor crează o tranzacție analog VB, care transmite banii lui Bob, doar în cazul în care Bob va prezenta numărul secret.</li><li>Bob vede că poate primi bani de la Victor, și îi arată acestuia numărul secret S. Acum, Victor poate demonstra că acesta a transmis banii lui Bob.</li></ol><p>Aici sunt câteva variante în care scenariile pot avea loc:</p><ol><li>Înainte de toate, Victor nu are nici un sens să o mintă pe Alisa. El nu poate să nu transmită banii lui Bob, deoarece, dealtfel, Victor oricum nu va primi bani de la Alisa.</li><li>Însă Bob, poate să decidă să-l mintă pe Victor și să nu-i dea acestuia numărul secret. Pe lângă asta, el poate închide canalul cu Victor și să înscrie în blockchain tranzacția VB. Însă, pentru primirea banilor, el oricum este nevoit să arate  numărul lui secret, și aici - Victor îl va recunoaște.</li></ol><p>Aici există câteva nuanțe, legate de timpul în care Alisa, Bob și Victor pot rezolva conflictele. Dar, aceasta este o temă mult prea tehnică. Dacă sunteți interesați - Google it (Time-Locked Contracts or HTLCs).</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="42-rutarea">4.2. Rutarea<a href="#42-rutarea" class="hash-link" aria-label="Direct link to 4.2. Rutarea" title="Direct link to 4.2. Rutarea">​</a></h2><p>În practică, Alisa și Bob pot fi legați între ei nu prin cunoscutul lor comun - Victor, ci prin câțiva necunoscuți intermediari din întreaga lume. Problema căutării celui mai scurt drum în graf, în rețea, se numește problema rutării.</p><p><img loading="lazy" src="https://cdn-images-1.medium.com/max/1600/1*933GpxVj8PzBVPMQGbDeng.png" class="img_ev3q">
(Împărțirea geografică a nodurilor în rețeaua de test)
Photo by: <a href="https://explorer.acinq.co/#/" target="_blank" rel="noopener noreferrer">https://explorer.acinq.co/#/</a>)</p><p>Problema rutării, în realitate este o ramură în care se fac cercetări active în acest moment. Alegerea drumului optim în graf depinde de mai mulți factori dinamici: numărul de noduri, topologia rețelei, capacitatea canalului de plăți, comisia nodurilor intermediare.</p><p>Ca să nu intrăm în detalii, căutarea drumului și transmiterea plăților în LN se realizează pe baza Onion Routing - tehnologia raspândirii informației în mod anonim, în rețelele peer-to-peer.  În acest fel, de exemplu, funcționează Tor.</p><p>Totul este descentralizat, tot traficul este criptat. Nimeni nu știe de la cine și către cine, vin și se duc banii. De aici, încă un avantaj.</p><p>👍 <strong>Avantaj</strong>:
Rețeaua LN este cu mult mai anonimă, decât însăși el - Bitcoin.
În primul rând, persoanele care fac plăți între ei, sunt văzute doar de câțiva membri ai rețelei. În al doilea rând, chiar și între membrii rețelei, doar primul și ultimul știe exact, de la cine și către cine vin și se transmit banii.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="43-comisioanele">4.3. Comisioanele<a href="#43-comisioanele" class="hash-link" aria-label="Direct link to 4.3. Comisioanele" title="Direct link to 4.3. Comisioanele">​</a></h3><p>Rămân două întrebări evidente.</p><p><strong>Întrebare numărul 1:</strong> De ce intermediarii trebuie să verifice tranzacții străine?
În primul rând deoarece ei însuși vor folosi mai ușor LN. În al doilea rând, deoarece ei vor primi din toată asta un comision foarte mic, dar totuși comision. În acest moment, rețeaua este întreținută în mare parte de entuziaști iar comisionul este aproape 0: 1 satoshi, sau 0.01 cent pentru fiecare intermediar.</p><p>👍 Capacitatea canalelor - nu este o resursă mai scumpă decât mărimea blocului. Deschiderea canelelor se face ușor și necostisitor. De aceea comisioanele în LN sunt cu mult mai mici decât comisioanele din Blockchain.</p><p><strong>Întrebarea numărul 2:</strong> Cum e cu comisionul la deschiderea/închiderea canalului?</p><p>Întradevăr, acest comision poate fi uneori și zeci de dolari. În acest fel, plățile vor fi mai profitabile dacă se vor deschide/închide canale mai puține. Aceasta motivează oamenii să deschidă canale cu depozite mari, și să folosească canalele în două direcții: nu doar pentru plățile care pleacă ci și pentru cele care vin. De exemplu: eu deschid un canal, fac o depunere de 1000$, și folosesc canalul dat doar pentru plățile de ieșire. Valoarea canalului va fi de 1000 dolari, din care undeva 20 de doloari se vor plăti pentru deschiderea/închiderea canalului. Adică, comisia totală va fi de 2%. Un pic mai bine decât cum e la Visa și Mastercard, dar evident mai mult decât aș fi dorit. Situația se schimbă drastic când eu încep să folosesc Lightning la maxim: făcând depozite mai mari și primind bani prin intermediul canalelor, ci nu doar cheltuindu-i. Atunci, depinzând de proporția intrare/ieșire a banilor, canalul poate fi deschis la infinit și comisioanele vor tinde spre zero.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="44-critici">4.4. Critici<a href="#44-critici" class="hash-link" aria-label="Direct link to 4.4. Critici" title="Direct link to 4.4. Critici">​</a></h3><p>Pe internet se poate găsi o mulțime de critici legate de soluția    layer-ului 2 și de Lighting Network în general. Careva puncte întradevăr merită atenție, multe - trebuie deja uitate. Câteva exemple:</p><ol><li><strong>Folosirea LN va duce la centralizare: utilizatorii vor fi motivați să se conecteze la hub-uri mari iar aceste hub-uri vor controla tot traficul.</strong></li></ol><p>Un asemenea risc există, dar acesta este foarte mic. În primul rând, e foarte economic și foarte simplu de realizat un nou nod care va respinge hub-urile mari. În al doilea rând, algoritmii de rutare urmăresc balansarea traficului. În al treilea rând, la acest moment, asemenea problemă nu există.</p><ol start="2"><li><strong>Capacitatea mică a canaleleor va face ca LN să fie suprasolicită, comisioanele vor crește și cel mai probabil situația va fi la fel, ca și în Blockchainul de baza.</strong></li></ol><p>Încă o dată, îndată ce așa ceva se va întâmpla, persoanele vor fi motivate să deschidă noduri personale. În comparație cu mărimea blocului, numărul de noduri, este practic nelimitată.</p><ol start="3"><li><strong>O rutare efectivă la un număr mare de noduri peer-to-peer este imposibilă. Mai ales ținând cont de dificultatea deschiderii a noi canale.</strong></li></ol><p>Până la o asemenea problemă este foarte și foarte departe iar cercetările în acest domeniu în mod activ au loc chiar în acest moment. Cu siguranță se vor lua ceva măsuri.</p><ol start="4"><li><strong>Canele sunt nevoie mereu să fie deschise și închise, comisioanele folosite pentru așa ceva vor fi mari iar folosirea LN nu se va merita.</strong> </li></ol><p>Defapt, problema dată este deja din trecut, pe care, nu înțeleg de ce, încă o discută. Ceva timp în urmă, versiunile canalelor de plată întradevăr, erau doar într-o singură direcție, iar canalul putea să existe doar o perioadă scurtă de timp. Acum aceste probleme sunt rezolvate.</p><ol start="5"><li><strong>Pentru folosirea LN este nevoie să fii online.</strong></li></ol><p>În comparație cu versiunile anterioare ale LN, utilizatorul nu este nevoit să se afle tot timpul online: alte noduri din rețea  vor verifica că doi deținători ale canalului de plată nu încearcă să se mintă unul pe altul. În mod cert, trebuie să fii online doar pentru trimiterea și primirea plăților, care fără nici o îndoială este un neajuns, dar de această dată, mult mai neimportant.</p><ol start="6"><li><strong>LN - aceasta nu este sigur.</strong>
Plățile LN sunt un pic mai periculoase decât plățile făcute direct în Blockchain. Dar, doar întrun singur context: un atac cu succes de 51% asupra Blockchain-ului Bitcoin. Riscul dat este unul catastrofic de mic.</li></ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="5-ln-astăzi">5. LN astăzi<a href="#5-ln-astăzi" class="hash-link" aria-label="Direct link to 5. LN astăzi" title="Direct link to 5. LN astăzi">​</a></h2><p>Lucrul cel mai important pe care trebuie să-l cunoașteți:
<strong>Lighthing</strong> deja se folosește și funcționează în realiate.</p><p>Mai mult de o mie de noduri în rețeaua de testare bitcoin și mai mult de 200 de noduri(numărul crește în fiecare zi) în rețeaua de bază bitcoin(mainnet) deja verifică plăți.</p><blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">Anyone want to help bug test new <a href="https://twitter.com/Blockstream?ref_src=twsrc%5Etfw" target="_blank" rel="noopener noreferrer">@Blockstream</a> <a href="https://twitter.com/hashtag/LightningNetwork?src=hash&amp;ref_src=twsrc%5Etfw" target="_blank" rel="noopener noreferrer">#LightningNetwork</a> store? The Github repos should make it easy enough for even <a href="https://twitter.com/coinbase?ref_src=twsrc%5Etfw" target="_blank" rel="noopener noreferrer">@coinbase</a> &amp; <a href="https://twitter.com/BitPay?ref_src=twsrc%5Etfw" target="_blank" rel="noopener noreferrer">@BitPay</a> to integrate with the second layer. Cypherpunks do not whine they write code. Right <a href="https://twitter.com/adam3us?ref_src=twsrc%5Etfw" target="_blank" rel="noopener noreferrer">@adam3us</a>? <a href="https://twitter.com/hashtag/MYOTHERNODEISASATELLITE?src=hash&amp;ref_src=twsrc%5Etfw" target="_blank" rel="noopener noreferrer">#MYOTHERNODEISASATELLITE</a> <a href="https://twitter.com/hashtag/DONTTRUSTVERIFY?src=hash&amp;ref_src=twsrc%5Etfw" target="_blank" rel="noopener noreferrer">#DONTTRUSTVERIFY</a> <a href="https://t.co/Il3YBvirYo" target="_blank" rel="noopener noreferrer">pic.twitter.com/Il3YBvirYo</a></p>— Trace Mayer (@TraceMayer) <a href="https://twitter.com/TraceMayer/status/953430172019101696?ref_src=twsrc%5Etfw" target="_blank" rel="noopener noreferrer">January 17, 2018</a></blockquote> <script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>Ce ține de softuri - există trei implementări de bază, lnt de la Lightning Labs, c-lightning de la Blockstream, eclair de la ACINQ.</p><p>Aceste echipe, nu doar de un an lucrează împreună, pentru a dezvolta un standard comun de interacțiune a nodurilor: Lighthing Network Specifications(BOLTs). Și uite că chiar la sfârșitul anului 2017, au testat protocolul de plăți, împreună, și toate cele trei implementări au fost cu succes. </p><p>Să achiți cu bitcoini reali folosind LN, se poate doar la câteva magazine online. Dar, asta e doar cu câteva magazine mai multe decât acum o lună, iar acesta deja este succes. </p><p>Desigur, momentul general de transfer de la on-chain bitcoin la plăți off-chain este încă foarte departe. O muncă imensă urmează să o facă dezvoltatorii de portofele virtuale, nodurile de plată, bursele, magazinele-online, și, nu în ultimul rând - utilizatorii. Cel mai interesant în această istorie este că tranzacții mult mai rapide, anonime și gratis - sunt doar începutul! Urmează o mai multă anonimitate, swap-uri atomice, schimburi distribuite și mult, mult mai mult.</p><p>Viitorul arată interesant!</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[🚀 Macbook Upgrade. First Impressions]]></title>
            <link>https://hackmajoris.github.io/2018/01/11/macbook-upgrade-first-impresions</link>
            <guid>https://hackmajoris.github.io/2018/01/11/macbook-upgrade-first-impresions</guid>
            <pubDate>Thu, 11 Jan 2018 00:00:00 GMT</pubDate>
            <description><![CDATA[First of all, I will tell you how I started using the Apple ecosystem.]]></description>
            <content:encoded><![CDATA[<p>First of all, I will tell you how I started using the Apple ecosystem.</p><p>Back in 2013, when I was in my second year at the university, I got involved in an iOS internship. It was the first time I had ever used a macOS system, which was running on a Mac mini computer. I enjoyed using the system, and a few days after the internship started, I installed a Hackintosh version of Mavericks on my Asus notebook in order to use it at home and practice iOS development. The Hackintosh system ran pretty well, but the only problem I had was with the WiFi adapter, which was not supported, and I had to use a LAN cable every time. However, I was happy that I could learn iOS development without paying for an expensive Mac computer.</p><p>After the internship, I continued to use the Hackintosh system to work on some projects at the university. As a result, my experience and motivation to buy an Apple computer grew.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="my-old-macbook">My old MacBook<a href="#my-old-macbook" class="hash-link" aria-label="Direct link to My old MacBook" title="Direct link to My old MacBook">​</a></h2><hr><p>About 3 years later, in December 2016, I bought my first Apple computer. It was a MacBook Pro from 2015 with a 13-inch display, i7 3.1 GHz CPU, 16 GB of RAM, and 256 GB of SSD space. To be honest, it was my second computer, which I bought just a few days later than the first one. You can read why I made this decision on <a href="https://www.quora.com/Should-a-computer-science-student-get-a-13-or-15-inch-MacBook-Pro/answer/Alexandru-Ilie%C8%99?srid=SKYq" target="_blank" rel="noopener noreferrer">Quora</a>.</p><p>This MacBook Pro was and still is a powerful computer, and it helped me to be more organized, efficient, and even happier in what I do.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="my-new-macbook">My new MacBook<a href="#my-new-macbook" class="hash-link" aria-label="Direct link to My new MacBook" title="Direct link to My new MacBook">​</a></h2><hr><p>I didn't have any essential reasons to upgrade my computer. It wasn't a burning desire, but then I created and advertised it on a local selling site two weeks ago. After that, someone wanted to buy it, and I wasn't prepared to part with it. I thought about keeping my old computer, but then I found an interesting advertisement. It wasn't a selling one, but a "changing" advertisement. The person who owned a MacBook Pro 2016 with touch bar, 13" display, 16 Gb of RAM, i7 3.3, and 512 Gb of SSD space wished to change it with the same configuration of MacBook Pro with a 15" display. I contacted him, and after a negotiation, he agreed to sell the computer to me. To be honest, it wasn't the best deal, and for a few hundred dollars more, I could have bought a more powerful MacBook Pro with a quad-core processor and a discrete GPU, but that's not what I wanted. The 13" display fit perfectly with my requirements. Even though the performance is lower than its 15" brother, it's still sufficient for my needs since I don't do any rendering or video gaming.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-makes-the-difference">What makes the difference<a href="#what-makes-the-difference" class="hash-link" aria-label="Direct link to What makes the difference" title="Direct link to What makes the difference">​</a></h2><hr><p>I've seen many opinions regarding the new MacBook Pro computers. Some people are saying that the upgrade is not worth it if you already own a 2015 model. Others are saying that it is worth it, but there are some things they hate, like the touch bar, keyboard, performance (because of 32 GB of RAM), and so on. Here are my two cents on the differences I'm experiencing right now.</p><p>I've owned the described new computer for 4 days, and I did not expect to experience so many changes, but I am.</p><p>So, here are the things I love:</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-performance">The performance<a href="#the-performance" class="hash-link" aria-label="Direct link to The performance" title="Direct link to The performance">​</a></h3><p>The performance is really great. I should do some more PC experiments, but I saw the improvements when I built/rebuilt iOS applications. It takes considerably less time.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-keyboard">The keyboard<a href="#the-keyboard" class="hash-link" aria-label="Direct link to The keyboard" title="Direct link to The keyboard">​</a></h3><p>I really love the new keyboard. It is so lovely to touch it and to write. I am more accurate doing this( using <a href="http://www.typingstudy.com/lesson/1/part/1" target="_blank" rel="noopener noreferrer">QWERTY</a> writing style, without looking at the keyboard)</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-cooling-system">The cooling system<a href="#the-cooling-system" class="hash-link" aria-label="Direct link to The cooling system" title="Direct link to The cooling system">​</a></h3><p>With a new version of the processor and two cooling fans, plus some other improvements - the experience is awesome. While building iOS apps or other way stressing CPU tasks, the old computer's fan had up to 7000 rpm/minute. On a low-performance tasks, it was at 1500/2000 rpm/minute. </p><p>On the new computer, the maximum rotation rate I registered was 2000 rpm/minute and you can't even hear them. The most interesting part, at low-performance tasks, it shows 0 rpm/minutes.</p><p><img loading="lazy" src="https://www.dropbox.com/s/fgb567y720jijft/Screen%20Shot%202018-01-14%20at%2014.53.11.png?raw=1" class="img_ev3q"></p><p>I really enjoy this improvement. I may say I have some allergy on fan sound because I hate it so much( I had some experience in the past with some desktop computer, but this is another story).</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-battery">The battery<a href="#the-battery" class="hash-link" aria-label="Direct link to The battery" title="Direct link to The battery">​</a></h3><p>Because of the cooling system, I think(of course and other stuff) the battery lasts for about - 7 hours. It is really enough for an entire workday.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="touch-bar">Touch bar<a href="#touch-bar" class="hash-link" aria-label="Direct link to Touch bar" title="Direct link to Touch bar">​</a></h3><p>Here is really simple. I do not hate or love it. On the other hand, I find the Touch ID very useful. </p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a href="#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">​</a></h2><hr><p>I think, generally, the upgrade is worth it. Especially for me, when thinking again about the cooling system.</p>]]></content:encoded>
        </item>
    </channel>
</rss>